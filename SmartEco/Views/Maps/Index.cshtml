@using System.Net
@using SmartEco.Controllers
@using Microsoft.Extensions.Localization
@inject IStringLocalizer<SharedResources> SharedLocalizer
@{
    ViewData["Title"] = SharedLocalizer["Map"];
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<script src="~/lib/jquery/dist/jquery.js"></script>
<link href="~/lib/openlayers/ol.css" rel="stylesheet" />
<script src="~/lib/openlayers/ol.js"></script>
<script src="~/lib/turf.js/turf515.min.js"></script>

@*<div hidden="hidden">
    <input id="EcomonsLayerJson" type="text" value="@ViewBag.EcomonsLayerJson" />
    <input id="KazHydrometAirPostsLayerJson" type="text" value="@ViewBag.KazHydrometAirPostsLayerJson" />
    <input id="KazHydrometSoilPostsLayerJson" type="text" value="@ViewBag.KazHydrometSoilPostsLayerJson" />
    <input id="PollutionSourcesLayerJson" type="text" value="@ViewBag.PollutionSourcesLayerJson" />*@
@*<input id="Look" type="text" value="@SharedLocalizer["Look"]" />*@
@*<input id="Look" type="text" value="Смотреть" />
        <input id="Number" type="text" value="@SharedLocalizer["Number"]" />
        <input id="Data" type="text" value="@SharedLocalizer["Data"]" />
        <input id="Name" type="text" value="@SharedLocalizer["Name"]" />
    </div>*@

@*<h1>@SharedLocalizer["Map"]</h1>*@

@*<div>
        <input type="checkbox" id="EcomonPoints" value="ecomonPoints" onchange="ChangeLayers()" />
        <label for="EcomonPoints">@SharedLocalizer["EcomonMonitoringPoints"]</label>
        <br />
        <input type="checkbox" id="KazHydrometAirPosts" value="KazHydrometAirPosts" onchange="ChangeLayers()" />
        <label for="KazHydrometAirPosts">@SharedLocalizer["KazHydrometAirPosts"]</label>
        <br />
        <input type="checkbox" id="KazHydrometSoilPosts" value="KazHydrometSoilPosts" onchange="ChangeLayers()" />
        <label for="KazHydrometSoilPosts">@SharedLocalizer["KazHydrometSoilPosts"]</label>
        <br />
        <input type="checkbox" id="PollutionSources" value="PollutionSources" onchange="ChangeLayers()" />
        <label for="PollutionSources">@SharedLocalizer["PollutionSources"]</label>
        <br />
        <input type="checkbox" id="SanitaryZone" value="SanitaryZone" onchange="ChangeLayers()" />
        <label for="SanitaryZone">@SharedLocalizer["SanitaryZone"]</label>
        <br />
        @{
            List<Layer> layers = ViewBag.Layers;
            foreach (Layer layer in layers)
            {
                <input type="checkbox" id="@layer.GeoServerName" value="@layer.GeoServerName" onchange="ChangeLayers()" />
                <label for="Layers">@layer.Name</label>
                <br />
            }
        }
    </div>
    <div class="form-group">
        <select id="layerBaseType" class="form-control form-control-sm" onchange="ChangeLayers()">
            <option value="OSM">OpenStreetMap</option>
            <option value="BingAerialWithLabels">Bing Aerial</option>
        </select>
    </div>
    <div class="form-group">
        <div id="map" style="height: 400px; width: 100%;"></div>
    </div>
    <div>
        <h4>Расчёт рассеивания</h4>
        <h5>Метеоусловия</h5>

        <label for="Temperature" class="control-label">Температура</label>
        <input type="text" id="Temperature" class="form-control" value=@ViewBag.Temperature />
        <br />
        <label for="WindSpeed" class="control-label">Скорость ветра</label>
        <input type="text" id="WindSpeed" class="form-control" value=@ViewBag.SpeedWind />
        <br />
        <label for="StartSpeed" class="control-label">Начальная скорость</label>
        <input type="text" id="StartSpeed" class="form-control" value="0" />
        <br />
        <label for="EndSpeed" class="control-label">Конечная скорость</label>
        <input type="text" id="EndSpeed" class="form-control" value="2" />
        <br />
        <label for="StepSpeed" class="control-label">Шаг скорости</label>
        <input type="text" id="StepSpeed" class="form-control" value="0,1" />
        <br />
        <label for="WindDirection" class="control-label">Направление ветра</label>
        <input type="text" id="WindDirection" class="form-control" value=@ViewBag.DirectionWind />
        <br />
        <label for="StartDirection" class="control-label">Начальное направление</label>
        <input type="text" id="StartDirection" class="form-control" value="0" />
        <br />
        <label for="EndDirection" class="control-label">Конечное направление</label>
        <input type="text" id="EndDirection" class="form-control" value="360" />
        <br />
        <label for="StepDirection" class="control-label">Шаг направления</label>
        <input type="text" id="StepDirection" class="form-control" value="1" />
        <br />
        <label for="uSpeed" class="control-label">Скорость ветра, повторяемость превышения которой составляет 5%</label>
        <input type="text" id="uSpeed" class="form-control" value="1" />
        <br />
        <label class="control-label">Загрязняющее вещество</label>
        @Html.DropDownList("Pollutants", (IEnumerable<SelectListItem>)ViewBag.Pollutants, htmlAttributes: new { @class = "form-control", @id = "Pollutants" })
        <br />
        <input type="button" class="btn btn-default" id="ToCalculate" value="Расчитать рассеивание" onclick="CalculateDissipation();">
    </div>
    <div>
        <table id="info_Ecomons" class="table"></table>
        <table id="info_KazHydrometAirPosts" class="table"></table>
        <table id="info_KazHydrometSoilPosts" class="table"></table>
        <table id="info_PollutionSources" class="table"></table>
    </div>*@

<style>
    label {
        display: inline;
    }

    .navbar {
        margin-bottom: 0;
        margin-right: 0;
    }

    .mb-3, my-3 {
        margin-bottom: 0 !important;
    }

    .container {
        margin: 0;
        padding: 0;
    }

    .map {
        width: 98.7vw;
        height: 100vh;
        margin: 0;
        padding: 0;
    }

    .sidepanel-left {
        width: 320px;
        padding: 0;
        background: rgba(225, 222, 239, 0.9);
        position: absolute;
        top: 60px;
        left: 40px;
        z-index: 1;
        font-family: Franklin Gothic Medium;
    }

    .left-content {
        margin: 10px 5px 0 10px;
    }

    .left-select {
        margin: 10px;
    }

    .sidepanel-right {
        width: 400px;
        padding: 0;
        background: rgba(225, 222, 239, 0.9);
        position: absolute;
        top: 60px;
        right: 5px;
        z-index: 1;
        display: flex;
        flex: 2;
        font-family: Franklin Gothic Medium;
        line-height: 1.3;
    }

    .left-section {
        flex: 1;
    }

    .right-section {
        flex: 1;
    }

    .left-section-contentLeft {
        margin: 5px 0 5px 10px;
    }

    .left-section-contentRight {
        margin: 10px;
    }

        .checkbox {
            position: relative;
            padding-left: 25px;
        }

        .checkbox input[type=checkbox] {
            display: none;
        }

        .checkbox label:after {
            content: '';
            display: block;
            height: 14px;
            width: 14px;
            outline: 1px solid #939598;
            position: absolute;
            top: 5px;
            left: 0;
        }

        .checkbox input[type=checkbox]:checked + label:after {
            outline: 1px solid #939598;
            border: 2px solid #fff;
            background-color: #63849F;
        }

        .checkbox input[type=checkbox]:not(:checked) + label:hover:after {
            outline: 1px solid #939598;
            border: 2px solid #fff;
            background-color: #fff;
        }

    input[type=text] {
        height: 30px;
        font-size: 15px;
    }

    #Pollutants {
        height: 30px;
        padding: 0 0 0 10px;
    }
</style>

<div hidden="hidden">
    <input id="EcomonsLayerJson" type="text" value="@ViewBag.EcomonsLayerJson" />
    <input id="KazHydrometAirPostsLayerJson" type="text" value="@ViewBag.KazHydrometAirPostsLayerJson" />
    <input id="KazHydrometSoilPostsLayerJson" type="text" value="@ViewBag.KazHydrometSoilPostsLayerJson" />
    <input id="PollutionSourcesLayerJson" type="text" value="@ViewBag.PollutionSourcesLayerJson" />
    @*<input id="Look" type="text" value="@SharedLocalizer["Look"]" />*@
    <input id="Look" type="text" value="Смотреть" />
    <input id="Number" type="text" value="@SharedLocalizer["Number"]" />
    <input id="Data" type="text" value="@SharedLocalizer["Data"]" />
    <input id="Name" type="text" value="@SharedLocalizer["Name"]" />
</div>

@*<h1>@SharedLocalizer["Map"]</h1>*@

<div class="sidepanel-left">
    <div>
        <div class="left-content">
            <div class="checkbox">
                <input type="checkbox" id="EcomonPoints" value="ecomonPoints" onchange="ChangeLayers()" />
                <label for="EcomonPoints">@SharedLocalizer["EcomonMonitoringPoints"]</label>
            </div>
        </div>
        <div class="left-content">
            <div class="checkbox">
                <input type="checkbox" id="KazHydrometAirPosts" value="KazHydrometAirPosts" onchange="ChangeLayers()" />
                <label for="KazHydrometAirPosts">@SharedLocalizer["KazHydrometAirPosts"]</label>
            </div>
        </div>
        <div class="left-content">
            <div class="checkbox">
                <input type="checkbox" id="KazHydrometSoilPosts" value="KazHydrometSoilPosts" onchange="ChangeLayers()" />
                <label for="KazHydrometSoilPosts">@SharedLocalizer["KazHydrometSoilPosts"]</label>
            </div>
        </div>
        <div class="left-content">
            <div class="checkbox">
                <input type="checkbox" id="PollutionSources" value="PollutionSources" onchange="ChangeLayers()" />
                <label for="PollutionSources">@SharedLocalizer["PollutionSources"]</label>
            </div>
        </div>
        <div class="left-content">
            <div class="checkbox">
                <input type="checkbox" id="SanitaryZone" value="SanitaryZone" onchange="ChangeLayers()" />
                <label for="SanitaryZone">@SharedLocalizer["SanitaryZone"]</label>
            </div>
        </div>
        <div class="left-content">
            @{
                List<Layer> layers = ViewBag.Layers;
                foreach (Layer layer in layers)
                {
                    <div class="checkbox">
                        <input type="checkbox" id="@layer.GeoServerName" value="@layer.GeoServerName" onchange="ChangeLayers()" />
                        <label for="@layer.GeoServerName">@layer.Name</label>
                    </div>
                }
            }
        </div>
    </div>
    <div class="form-group, left-select">
        <select id="layerBaseType" class="form-control form-control-sm" onchange="ChangeLayers()">
            <option value="OSM">OpenStreetMap</option>
            <option value="BingAerialWithLabels">Bing Aerial</option>
        </select>
    </div>
</div>
<div>
    <div id="map" class="map"></div>
</div>
<div class="sidepanel-right">
    <div class="left-section">
        @*<h5>Расчёт рассеивания</h5>*@
        <div class="left-section-contentLeft">
            <label for="Temperature" class="control-label">Температура</label>
            <input type="text" id="Temperature" class="form-control" step=",01" value=@ViewBag.Temperature />
        </div>
        <div class="left-section-contentLeft">
            <label for="WindSpeed" class="control-label">Скорость ветра</label>
            <input type="text" id="WindSpeed" class="form-control" value=@ViewBag.SpeedWind />
        </div>
        <div class="left-section-contentLeft">
            <label for="StartSpeed" class="control-label">Начальная скорость</label>
            <input type="text" id="StartSpeed" class="form-control" value="0" />
        </div>
        <div class="left-section-contentLeft">
            <label for="EndSpeed" class="control-label">Конечная скорость</label>
            <input type="text" id="EndSpeed" class="form-control" value="2" />
        </div>
        <div class="left-section-contentLeft">
            <label for="StepSpeed" class="control-label">Шаг скорости</label>
            <input type="text" id="StepSpeed" class="form-control" value="0,1" />
        </div>
        <div class="left-section-contentLeft">
            <label for="WindDirection" class="control-label">Направление ветра</label>
            <input type="text" id="WindDirection" class="form-control" value=@ViewBag.DirectionWind />
        </div>
        <div class="left-section-contentLeft">
            <label for="StartDirection" class="control-label">Начальное направление</label>
            <input type="text" id="StartDirection" class="form-control" value="0" />
        </div>
        <div class="left-section-contentLeft">
            <label for="EndDirection" class="control-label">Конечное направление</label>
            <input type="text" id="EndDirection" class="form-control" value="360" />
        </div>
    </div>
    <div class="right-section">
        <div class="left-section-contentRight">
            <label for="StepDirection" class="control-label">Шаг направления</label>
            <input type="text" id="StepDirection" class="form-control" value="1" />
        </div>
        <div class="left-section-contentRight">
            <label for="uSpeed" class="control-label">Скорость ветра, повторяемость превышения которой составляет 5%</label>
            <input type="text" id="uSpeed" class="form-control" value="1" />
        </div>
        <div class="left-section-contentRight">
            <label class="control-label">Загрязняющее вещество</label>
            @Html.DropDownList("Pollutants", (IEnumerable<SelectListItem>)ViewBag.Pollutants, htmlAttributes: new { @class = "form-control", @id = "Pollutants" })
        </div>
        <div class="left-section-contentRight">
            <label for="Width" class="control-label">Ширина области</label>
            <input type="text" id="Width" class="form-control" value="4000" />
        </div>
        <div class="left-section-contentRight">
            <label for="Length" class="control-label">Длина области</label>
            <input type="text" id="Length" class="form-control" value="4000" />
        </div>
        <div class="left-section-contentRight">
            <label for="Step" class="control-label">Шаг рассеивания</label>
            <input type="text" id="Step" class="form-control" value="20" />
        </div>
        <div class="left-section-contentRight">
            <input type="button" class="btn btn-default" id="ToCalculate" value="Расчитать рассеивание" onclick="CalculateDissipation();">
        </div>
    </div>
</div>
<div>
    <table id="info_Ecomons" class="table"></table>
    <table id="info_KazHydrometAirPosts" class="table"></table>
    <table id="info_KazHydrometSoilPosts" class="table"></table>
    <table id="info_PollutionSources" class="table"></table>
</div>


<script type="text/javascript">
    var geoserverPort = '8080',
        geoserverAddress = window.location.hostname;

    var source = new ol.source.Vector();
    var layer = new ol.layer.Vector({
        source: source
    });

    var layers = [];

    var Source_OSM = new ol.source.OSM(),
        Source_BingAerialWithLabels = new ol.source.BingMaps({
            key: 'AvXWBeyEt0tMq0Cmi-TdlXA6qG2GDpuV1UcSbSqNXbfHcQ41GFYtjpu0gz8RS6-b',
            imagerySet: 'AerialWithLabels',
        });

    layers.push(new ol.layer.Tile({
        source: Source_OSM
    }));
    layers[0].set('name', 'Base');

    var EcomonsStyle = new ol.style.Style({
        image: new ol.style.Icon(({
            src: '/images/EcomonMonitoringPoints.png'
        }))
    });
    //function EcomonsStyleFunction(feature, resolution) {
    //    return new ol.style.Style({
    //        image: new ol.style.Circle({
    //            radius: 3,
    //            fill: new ol.style.Fill({
    //                color: [255, 0, 0, 1]
    //            }),
    //            stroke: new ol.style.Stroke({
    //                color: [255, 0, 0, 1],
    //                width: 1
    //            })
    //        })
    //    });
    //};
    var EcomonsLayerJson = $("#EcomonsLayerJson").val();
    var Source_Ecomons = new ol.source.Vector({
        features: (new ol.format.GeoJSON()).readFeatures(EcomonsLayerJson, {
            dataProjection: 'EPSG:4326',
            featureProjection: 'EPSG:3857'
        })
    });
    var Layer_Ecomons = new ol.layer.Vector({
        source: Source_Ecomons,
        style: EcomonsStyle,
        renderBuffer: 200
    });
    Layer_Ecomons.set('name', 'Ecomons');
    Layer_Ecomons.setVisible(false);
    Layer_Ecomons.setOpacity(1);
    layers.push(Layer_Ecomons);

    var KazHydrometAirPostsStyle = new ol.style.Style({
        image: new ol.style.Icon(({
            src: '/images/KazHydrometAirPosts.png'
        }))
    });
    var KazHydrometAirPostsLayerJson = $("#KazHydrometAirPostsLayerJson").val();
    var Source_KazHydrometAirPosts = new ol.source.Vector({
        features: (new ol.format.GeoJSON()).readFeatures(KazHydrometAirPostsLayerJson, {
            dataProjection: 'EPSG:4326',
            featureProjection: 'EPSG:3857'
        })
    });
    var Layer_KazHydrometAirPosts = new ol.layer.Vector({
        source: Source_KazHydrometAirPosts,
        style: KazHydrometAirPostsStyle,
        renderBuffer: 200
    });
    Layer_KazHydrometAirPosts.set('name', 'KazHydrometAirPosts');
    Layer_KazHydrometAirPosts.setVisible(false);
    Layer_KazHydrometAirPosts.setOpacity(1);
    layers.push(Layer_KazHydrometAirPosts);

    var KazHydrometSoilPostsStyle = new ol.style.Style({
        image: new ol.style.Icon(({
            src: '/images/KazHydrometSoilPosts.png'
        }))
    });
    var KazHydrometSoilPostsLayerJson = $("#KazHydrometSoilPostsLayerJson").val();
    var Source_KazHydrometSoilPosts = new ol.source.Vector({
        features: (new ol.format.GeoJSON()).readFeatures(KazHydrometSoilPostsLayerJson, {
            dataProjection: 'EPSG:4326',
            featureProjection: 'EPSG:3857'
        })
    });
    var Layer_KazHydrometSoilPosts = new ol.layer.Vector({
        source: Source_KazHydrometSoilPosts,
        style: KazHydrometSoilPostsStyle,
        renderBuffer: 200
    });
    Layer_KazHydrometSoilPosts.set('name', 'KazHydrometSoilPosts');
    Layer_KazHydrometSoilPosts.setVisible(false);
    Layer_KazHydrometSoilPosts.setOpacity(1);
    layers.push(Layer_KazHydrometSoilPosts);

    var PollutionSourcesStyle = new ol.style.Style({
        image: new ol.style.Icon(({
            src: '/images/PollutionSources.png'
        }))
    });
    var PollutionSourcesLayerJson = $("#PollutionSourcesLayerJson").val();
    var Source_PollutionSources = new ol.source.Vector({
        features: (new ol.format.GeoJSON()).readFeatures(PollutionSourcesLayerJson, {
            dataProjection: 'EPSG:4326',
            featureProjection: 'EPSG:3857'
        })
    });
    var Layer_PollutionSources = new ol.layer.Vector({
        source: Source_PollutionSources,
        style: PollutionSourcesStyle,
        renderBuffer: 200
    });
    Layer_PollutionSources.set('name', 'PollutionSources');
    Layer_PollutionSources.setVisible(false);
    Layer_PollutionSources.setOpacity(1);
    layers.push(Layer_PollutionSources);

    var Source_Isolines = new ol.source.Vector({
        features: (new ol.format.GeoJSON())
    });

    //var IsolinesStyle = new ol.style.Style({
    //    stroke: new ol.style.Stroke({
    //        color: [255, 100, 25, 1],
    //        width: 2
    //    })
    //});

    var isolinesLayer = new ol.layer.Vector({
        source: Source_Isolines,
        //style: IsolinesStyle
        style: (feature, resolution) => {
            const color = perc2colorForIsolines(
                parseFloat(feature.get('c_pdk')),
                1
            );
            return new ol.style.Style({
                stroke: new ol.style.Stroke({
                    color: color,
                    width: 2
                }),
                text: createTextStyle(feature, resolution, linesProperties)
            });
        }
    });

    isolinesLayer.set('name', 'Isolines');
    isolinesLayer.setVisible(false);
    isolinesLayer.setOpacity(1);
    layers.push(isolinesLayer);

    format = new ol.format.GeoJSON();

    //var SanitaryZoneStyle = new ol.style.Style({
    //    image: new ol.style.Icon(({
    //        //src: '/images/SanitaryZone.png'
    //        src: '/images/KazHydrometSoilPosts.png'
    //    }))
    //});
    //var SanitaryZoneLayerJson = $("#SanitaryZoneLayerJson").val();

    //var Source_SanitaryZone = new ol.source.Vector({
    //    features: (new ol.format.GeoJSON())
    //});
    //var Layer_SanitaryZone = new ol.layer.Vector({
    //    source: Source_SanitaryZone,
    //    style: SanitaryZoneStyle,
    //    renderBuffer: 200
    //});
    //Layer_SanitaryZone.set('name', 'SanitaryZone');
    //Layer_SanitaryZone.setVisible(false);
    //Layer_SanitaryZone.setOpacity(1);
    //layers.push(Layer_SanitaryZone);

    var Source_SanitaryZone = new ol.source.ImageWMS({
        url: 'http://' + geoserverAddress + ':' + geoserverPort + '/geoserver/SmartEco/wms?',
        params: {
            'LAYERS': 'SmartEco:SanitaryZone'
        },
        serverType: 'geoserver'
    });
    var Layer_SanitaryZone = new ol.layer.Image({
        source: Source_SanitaryZone
    });
    Layer_SanitaryZone.set('name', 'SanitaryZone');
    Layer_SanitaryZone.setVisible(false);
    Layer_SanitaryZone.setOpacity(0.8);
    layers.push(Layer_SanitaryZone);

    var map = new ol.Map({
        controls: new ol.control.defaults().extend([
            new ol.control.ScaleLine()
        ]),
        target: 'map',
        layers: layers,
        view: new ol.View({
            //center: ol.proj.fromLonLat([68.291, 47.5172]),
            center: ol.proj.fromLonLat([77.00667, 43.42417]),
            zoom: 14
        })
    });

    var gslayers = [],
        gslayersdata = [];

    $.ajax({
        url: '@Url.Action("GetLayers", "Layers")',
        //data: { KATOId: KATOId },
        type: 'POST',
        success: function (data) {
            $.each(data, function () {
                var Source_new_gs_layer = new ol.source.ImageWMS({
                    url: 'http://' + geoserverAddress + ':' + geoserverPort + '/geoserver/SmartEco/wms?',
                    params: {
                        'LAYERS': 'SmartEco:' + this.geoServerName
                    },
                    serverType: 'geoserver'
                });
                var Layer_new_gs_layer = new ol.layer.Image({
                    source: Source_new_gs_layer
                });
                Layer_new_gs_layer.set('name', this.geoServerName);
                Layer_new_gs_layer.setVisible(false);
                Layer_new_gs_layer.setOpacity(0.8);
                gslayers.push(Layer_new_gs_layer);
                map.addLayer(Layer_new_gs_layer);
                this.gslayer = Layer_new_gs_layer;
                gslayersdata.push(this);
            });
        },
        error: function () {
        }
    });

    function ChangeLayers() {
        //alert(gslayersdata[0].geoServerName);
        gslayersdata.forEach(function (gslayerdata) {
            if (document.getElementById(gslayerdata.geoServerName).checked == true) {
                gslayerdata.gslayer.setVisible(true);
            }
            if (document.getElementById(gslayerdata.geoServerName).checked == false) {
                gslayerdata.gslayer.setVisible(false);
            }
        })
        //map.getLayers().forEach(function (layer) {
            if (document.getElementById("EcomonPoints").checked == true) {
                Layer_Ecomons.setVisible(true);
            }
            if (document.getElementById("EcomonPoints").checked == false) {
                Layer_Ecomons.setVisible(false);
            }
            if (document.getElementById("KazHydrometAirPosts").checked == true) {
                Layer_KazHydrometAirPosts.setVisible(true);
            }
            if (document.getElementById("KazHydrometAirPosts").checked == false) {
                Layer_KazHydrometAirPosts.setVisible(false);
            }
            if (document.getElementById("KazHydrometSoilPosts").checked == true) {
                Layer_KazHydrometSoilPosts.setVisible(true);
            }
            if (document.getElementById("KazHydrometSoilPosts").checked == false) {
                Layer_KazHydrometSoilPosts.setVisible(false);
            }
            if (document.getElementById("PollutionSources").checked == true) {
                Layer_PollutionSources.setVisible(true);
            }
            if (document.getElementById("PollutionSources").checked == false) {
                Layer_PollutionSources.setVisible(false);
            }
            if (document.getElementById("SanitaryZone").checked == true) {
                Layer_SanitaryZone.setVisible(true);
            }
            if (document.getElementById("SanitaryZone").checked == false) {
                Layer_SanitaryZone.setVisible(false);
            }
        map.getLayers().forEach(function (layer) {
            if (layer.get('name') == 'Base') {
                var nameSource = "";
                if ($('#layerBaseType').val() == 'OSM') {
                    layer.setSource(Source_OSM);
                    nameSource = "Source_OSM";
                    ChangeRaster(nameSource);
                }
                else if ($('#layerBaseType').val() == 'BingAerialWithLabels') {
                    layer.setSource(Source_BingAerialWithLabels);
                    nameSource = "Source_BingAerialWithLabels";
                    ChangeRaster(nameSource);
                }
            }
        })
        //})
    }

    var maxPdkForIsolines,
        minPdkForIsolines,
        COUNT_STEPS;

    var linesProperties = {
        text: 'wrap',
        align: '',
        baseline: 'middle',
        rotation: '0',
        font: '\'Courier New\'',
        weight: 'normal',
        placement: 'point',
        maxangle: '0.1',
        overflow: 'false',
        size: '8px',
        offsetX: '0',
        offsetY: '0',
        color: 'green',
        outline: '#ffffff',
        outlineWidth: '3',
        maxreso: '20',
        getPropertyFunction: function (feature) {
            return (Math.round(+feature.get('c_pdk') * 100) / 100).toString();
        }
    };

    function CalculateDissipation() {
        var temperature = $('#Temperature').val();
        var windSpeed = $('#WindSpeed').val();
        var startSpeed = $('#StartSpeed').val();
        var endSpeed = $('#EndSpeed').val();
        var stepSpeed = $('#StepSpeed').val();
        var windDirection = $('#WindDirection').val();
        var startDirection = $('#StartDirection').val();
        var endDirection = $('#EndDirection').val();
        var stepDirection = $('#StepDirection').val();
        var uSpeed = $('#uSpeed').val();
        var pollutants = $('#Pollutants').val();
        var width = $('#Width').val();
        var length = $('#Length').val();

        COUNT_STEPS = $('#Step').val();

        $.ajax({
            url: '@Url.Action("CalculateDissipation")',
            data: {
                temperature: temperature,
                windSpeed: windSpeed,
                startSpeed: startSpeed,
                endSpeed: endSpeed,
                stepSpeed: stepSpeed,
                windDirection: windDirection,
                startDirection: startDirection,
                endDirection: endDirection,
                stepDirection: stepDirection,
                uSpeed: uSpeed,
                pollutants: pollutants,
                width: width,
                length: length
            },
            type: 'POST',
            success: function (data) {
                var turfFeatureCollection = JSON.parse(data.answer);
                const minAndMax = turfFeatureCollection.features.reduce(
                    (values, feature) => {
                        const c = feature.properties['c_pdk'];

                        if (values.max < c) {
                            values.max = c;
                        }

                        if (values.min > c) {
                            values.min = c;
                        }

                        return values;
                    },
                    { min: Number.MAX_SAFE_INTEGER, max: 0 }
                );
                const step = (minAndMax.max - minAndMax.min) / COUNT_STEPS;
                maxPdkForIsolines = minAndMax.max;
                minPdkForIsolines = minAndMax.min;

                const breaks = [];
                breaks.push(0);
                if (step > 0) {
                    for (let pdk = minAndMax.min; pdk <= minAndMax.max; pdk += step) {
                        breaks.push(pdk);
                    }

                    breaks.push(1);
                }
                breaks.push(minAndMax.max);
                const lines = turf.isolines(turfFeatureCollection, breaks, { zProperty: 'c_pdk' });
                //isolinesLayer.getSource().addFeatures(format.readFeatures(lines));
                //isolinesLayer.setVisible(true);
                //var marker = format.readFeatures(lines, {
                //    dataProjection: 'EPSG:4326',
                //    featureProjection: 'EPSG:3857'
                //});
                var marker = format.readFeatures(lines);
                isolinesLayer.getSource().clear(true);
                isolinesLayer.getSource().addFeatures(marker);
                isolinesLayer.setVisible(true);
            },
            error: function () {
            }
        });
    }

    function perc2colorForIsolines(pdk, opacity) {
        let color;
        if (maxPdkForIsolines === minPdkForIsolines) {
            color = pdk > maxPdkForIsolines ? 255 : 0;
        } else {
            color = (
                (pdk - minPdkForIsolines) /
                ((maxPdkForIsolines - minPdkForIsolines) / (COUNT_STEPS + 2))
            ) * (255 / COUNT_STEPS);
        }
        return 'rgba(' + (255 - color) + ',' + (255 - color) + ',' + (255 - color) + ', ' + opacity + ')';
    }

    var createTextStyle = function (feature, resolution, dom) {
        var align = dom.align;
        var baseline = dom.baseline;
        var size = dom.size;
        var offsetX = parseInt(dom.offsetX, 10);
        var offsetY = parseInt(dom.offsetY, 10);
        var weight = dom.weight;
        var placement = dom.placement ? dom.placement : undefined;
        var maxAngle = dom.maxangle ? parseFloat(dom.maxangle) : undefined;
        var overflow = dom.overflow ? (dom.overflow.value === 'true') : undefined;
        var rotation = parseFloat(dom.rotation);
        var font = weight + ' ' + size + ' ' + dom.font;
        var fillColor = dom.color;
        var outlineColor = dom.outline;
        var outlineWidth = parseInt(dom.outlineWidth, 10);

        return new ol.style.Text({
            textAlign: align === '' ? undefined : align,
            textBaseline: baseline,
            font: font,
            text: getText(feature, resolution, dom),
            fill: new ol.style.Fill({ color: fillColor }),
            stroke: new ol.style.Stroke({ color: outlineColor, width: outlineWidth }),
            offsetX: offsetX,
            offsetY: offsetY,
            placement: placement,
            maxAngle: true,
            overflow: overflow,
            rotation: rotation
        });
    };

    function getText(feature, resolution, dom) {
        var text = dom.getPropertyFunction(feature);

        return stringDivider(text, 16, '\n');
    }

    function stringDivider(str, width, spaceReplacer) {
        if (str.length > width) {
            let p = width;
            while (p > 0 && (str[p] !== ' ' && str[p] !== '-')) {
                p--;
            }
            if (p > 0) {
                let left;
                if (str.substring(p, p + 1) === '-') {
                    left = str.substring(0, p + 1);
                } else {
                    left = str.substring(0, p);
                }
                const right = str.substring(p + 1);
                return left + spaceReplacer + stringDivider(right, width, spaceReplacer);
            }
        }
        return str;
    }

    function ChangeRaster(nameSource) {
        map.getLayers().forEach(function (layer) {
            if (layer.get('name') == 'raster') {
                if (nameSource == 'Source_OSM') {
                    layer.setSource(Source_OSM);
                } else if (nameSource == 'Source_BingAerialWithLabels') {
                    layer.setSource(Source_BingAerialWithLabels);
                }
            }
        })
    }



    var temp = parseFloat(document.getElementById('Temperature').value.replace(',', '.'));
    temp = temp.toFixed(2).replace('.', ',');
    $("#Temperature").val(temp);
</script>

<script>
    map.on('singleclick', function (evt) {

        //var viewResolution = (map.getView().getResolution());
        var pixel = evt.pixel;

        $('#info_Ecomons').empty();
        $('#info_KazHydrometAirPosts').empty();
        $('#info_KazHydrometSoilPosts').empty();
        $('#info_PollutionSources').empty();

        var featuresEcomons = [];
        if (Layer_Ecomons.getVisible()) {
            map.forEachFeatureAtPixel(pixel, function (feature, layer) {
                if (layer == Layer_Ecomons) {
                    featuresEcomons.push(feature);
                }
            });
            var contentEcomons = '';
            for (var i = 0, ii = featuresEcomons.length; i < ii; ++i) {

                contentEcomons +=
                    '<tr>' +
                    '<th>' +
                    $('#Number').val() +
                    '</th>' +
                    '<th>' +
                    $('#Data').val() +
                    '</th>' +
                    '</tr>' +
                    '<tr>' +
                    '<td>' +
                    //'<a href="../Ecomons/Details/' + featuresEcomons[i].get('Id') + '" target="_blank">' + featuresEcomons[i].get('Name') + '</a>' +
                    featuresEcomons[i].get('Number') +
                    '</td>' +
                    '<td>' +
                    '<a href="../EcomonMonitoringPoints/Details/' + featuresEcomons[i].get('Id') + '" target="_blank">' + $('#Look').val() + '</a>' +
                    '</td>' +
                    '</tr>';
            }
            $('#info_Ecomons').append(contentEcomons);
        }

        var featuresKazHydrometAirPosts = [];
        if (Layer_KazHydrometAirPosts.getVisible()) {
            map.forEachFeatureAtPixel(pixel, function (feature, layer) {
                if (layer == Layer_KazHydrometAirPosts) {
                    featuresKazHydrometAirPosts.push(feature);
                }
            });
            var contentKazHydrometAirPosts = '';
            for (var i = 0, ii = featuresKazHydrometAirPosts.length; i < ii; ++i) {

                contentKazHydrometAirPosts +=
                    '<tr>' +
                    '<th>' +
                    $('#Number').val() +
                    '</th>' +
                    '<th>' +
                    $('#Data').val() +
                    '</th>' +
                    '</tr>' +
                    '<tr>' +
                    '<td>' +
                    //'<a href="../Ecomons/Details/' + featuresEcomons[i].get('Id') + '" target="_blank">' + featuresEcomons[i].get('Name') + '</a>' +
                    featuresKazHydrometAirPosts[i].get('Number') +
                    '</td>' +
                    '<td>' +
                    '<a href="../KazHydrometAirPosts/Details/' + featuresKazHydrometAirPosts[i].get('Id') + '" target="_blank">' + $('#Look').val() + '</a>' +
                    '</td>' +
                    '</tr>';
            }
            $('#info_KazHydrometAirPosts').append(contentKazHydrometAirPosts);
        }

        var featuresKazHydrometSoilPosts = [];
        if (Layer_KazHydrometSoilPosts.getVisible()) {
            map.forEachFeatureAtPixel(pixel, function (feature, layer) {
                if (layer == Layer_KazHydrometSoilPosts) {
                    featuresKazHydrometSoilPosts.push(feature);
                }
            });
            var contentKazHydrometSoilPosts = '';
            for (var i = 0, ii = featuresKazHydrometSoilPosts.length; i < ii; ++i) {

                contentKazHydrometSoilPosts +=
                    '<tr>' +
                    '<th>' +
                    $('#Number').val() +
                    '</th>' +
                    '<th>' +
                    $('#Data').val() +
                    '</th>' +
                    '</tr>' +
                    '<tr>' +
                    '<td>' +
                    //'<a href="../Ecomons/Details/' + featuresEcomons[i].get('Id') + '" target="_blank">' + featuresEcomons[i].get('Name') + '</a>' +
                    featuresKazHydrometSoilPosts[i].get('Number') +
                    '</td>' +
                    '<td>' +
                    '<a href="../KazHydrometSoilPosts/Details/' + featuresKazHydrometSoilPosts[i].get('Id') + '" target="_blank">' + $('#Look').val() + '</a>' +
                    '</td>' +
                    '</tr>';
            }
            $('#info_KazHydrometSoilPosts').append(contentKazHydrometSoilPosts);
        }

        var featuresPollutionSources = [];
        if (Layer_PollutionSources.getVisible()) {
            map.forEachFeatureAtPixel(pixel, function (feature, layer) {
                if (layer == Layer_PollutionSources) {
                    featuresPollutionSources.push(feature);
                }
            });
            var contentPollutionSources = '';
            for (var i = 0, ii = featuresPollutionSources.length; i < ii; ++i) {

                contentPollutionSources +=
                    '<tr>' +
                    '<th>' +
                    $('#Name').val() +
                    '</th>' +
                    '<th>' +
                    $('#Data').val() +
                    '</th>' +
                    '</tr>' +
                    '<tr>' +
                    '<td>' +
                    //'<a href="../Ecomons/Details/' + featuresEcomons[i].get('Id') + '" target="_blank">' + featuresEcomons[i].get('Name') + '</a>' +
                    featuresPollutionSources[i].get('Name') +
                    '</td>' +
                    '<td>' +
                    '<a href="../PollutionSources/Details/' + featuresPollutionSources[i].get('Id') + '" target="_blank">' + $('#Look').val() + '</a>' +
                    '</td>' +
                    '</tr>';
            }
            $('#info_PollutionSources').append(contentPollutionSources);
        }
    });
</script>
