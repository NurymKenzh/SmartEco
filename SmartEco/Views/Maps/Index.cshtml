@using System.Net
@using SmartEco.Controllers
@using Microsoft.Extensions.Localization
@inject IStringLocalizer<SharedResources> SharedLocalizer
@{
    ViewData["Title"] = SharedLocalizer["Map"];
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<script src="~/lib/jquery/dist/jquery.js"></script>
<link href="~/lib/openlayers/ol.css" rel="stylesheet" />
<script src="~/lib/openlayers/ol.js"></script>
<script src="~/lib/turf.js/turf515.min.js"></script>

<div hidden="hidden">
    <input id="EcomonsLayerJson" type="text" value="@ViewBag.EcomonsLayerJson" />
    <input id="KazHydrometAirPostsLayerJson" type="text" value="@ViewBag.KazHydrometAirPostsLayerJson" />
    <input id="KazHydrometSoilPostsLayerJson" type="text" value="@ViewBag.KazHydrometSoilPostsLayerJson" />
    <input id="PollutionSourcesLayerJson" type="text" value="@ViewBag.PollutionSourcesLayerJson" />
    @*<input id="Look" type="text" value="@SharedLocalizer["Look"]" />*@
    <input id="Look" type="text" value="Смотреть" />
    <input id="Number" type="text" value="@SharedLocalizer["Number"]" />
    <input id="Data" type="text" value="@SharedLocalizer["Data"]" />
    <input id="Name" type="text" value="@SharedLocalizer["Name"]" />
</div>

<h1>@SharedLocalizer["Map"]</h1>

<div>
    <input type="checkbox" id="EcomonPoints" value="ecomonPoints" onchange="ChangeLayers()" />
    <label for="EcomonPoints">@SharedLocalizer["EcomonMonitoringPoints"]</label>

    <input type="checkbox" id="KazHydrometAirPosts" value="KazHydrometAirPosts" onchange="ChangeLayers()" />
    <label for="KazHydrometAirPosts">@SharedLocalizer["KazHydrometAirPosts"]</label>

    <input type="checkbox" id="KazHydrometSoilPosts" value="KazHydrometSoilPosts" onchange="ChangeLayers()" />
    <label for="KazHydrometSoilPosts">@SharedLocalizer["KazHydrometSoilPosts"]</label>

    <input type="checkbox" id="PollutionSources" value="PollutionSources" onchange="ChangeLayers()" />
    <label for="PollutionSources">@SharedLocalizer["PollutionSources"]</label>

    <input type="checkbox" id="SanitaryZone" value="SanitaryZone" onchange="ChangeLayers()" />
    <label for="SanitaryZone">@SharedLocalizer["SanitaryZone"]</label>

    @{
        List<Layer> layers = ViewBag.Layers;
        foreach (Layer layer in layers)
        {
            <input type="checkbox" id="@layer.GeoServerName" value="@layer.GeoServerName" onchange="ChangeLayers()" />
            <label for="Layers">@layer.Name</label>
        }
    }
</div>
<div class="form-group">
    <div id="map" style="height: 400px; width: 100%;"></div>
</div>
<div>
    <h4>Расчёт рассеивания</h4>
    <h5>Метеоусловия</h5>

    <label for="Temperature">Температура, С:</label>
    <input type="text" id="Temperature" value=@ViewBag.Temperature />
    <br />
    <label for="WindSpeed">Скорость ветра, м/с:</label>
    <input type="text" id="WindSpeed" value=@ViewBag.SpeedWind />
    <br />
    <label for="StartSpeed">Начальная скорость:</label>
    <input type="text" id="StartSpeed" value="0" />
    <br />
    <label for="EndSpeed">Конечная скорость:</label>
    <input type="text" id="EndSpeed" value="2" />
    <br />
    <label for="StepSpeed">Шаг скорости:</label>
    <input type="text" id="StepSpeed" value="0,1" />
    <br />
    <label for="WindDirection">Направление ветра, градусы:</label>
    <input type="text" id="WindDirection" value=@ViewBag.DirectionWind />
    <br />
    <label for="StartDirection">Начальное направление:</label>
    <input type="text" id="StartDirection" value="0" />
    <br />
    <label for="EndDirection">Конечное направление:</label>
    <input type="text" id="EndDirection" value="360" />
    <br />
    <label for="StepDirection">Шаг направления:</label>
    <input type="text" id="StepDirection" value="1" />
    <br />
    <label for="uSpeed">Скорость ветра, повторяемость превышения которой составляет 5%, м/с:</label>
    <input type="text" id="uSpeed" value="1" />
    <br />
    <label class="control-label">Загрязняющее вещество</label>
    @Html.DropDownList("Pollutants", (IEnumerable<SelectListItem>)ViewBag.Pollutants, htmlAttributes: new { @class = "form-control", @id = "Pollutants" })
    <br />
    <input type="button" id="ToCalculate" value="Расчитать рассеивание" onclick="CalculateDissipation();">
</div>
<div>
    <table id="info_Ecomons" class="table"></table>
    <table id="info_KazHydrometAirPosts" class="table"></table>
    <table id="info_KazHydrometSoilPosts" class="table"></table>
    <table id="info_PollutionSources" class="table"></table>
</div>

<script type="text/javascript">
    var geoserverPort = '8080',
        geoserverAddress = window.location.hostname;

    var source = new ol.source.Vector();
    var layer = new ol.layer.Vector({
        source: source
    });

    var layers = [];
    layers.push(new ol.layer.Tile({
        source: new ol.source.OSM()
    }));
    layers[0].set('name', 'OSM');

    var EcomonsStyle = new ol.style.Style({
        image: new ol.style.Icon(({
            src: '/images/EcomonMonitoringPoints.png'
        }))
    });
    //function EcomonsStyleFunction(feature, resolution) {
    //    return new ol.style.Style({
    //        image: new ol.style.Circle({
    //            radius: 3,
    //            fill: new ol.style.Fill({
    //                color: [255, 0, 0, 1]
    //            }),
    //            stroke: new ol.style.Stroke({
    //                color: [255, 0, 0, 1],
    //                width: 1
    //            })
    //        })
    //    });
    //};
    var EcomonsLayerJson = $("#EcomonsLayerJson").val();
    var Source_Ecomons = new ol.source.Vector({
        features: (new ol.format.GeoJSON()).readFeatures(EcomonsLayerJson, {
            dataProjection: 'EPSG:4326',
            featureProjection: 'EPSG:3857'
        })
    });
    var Layer_Ecomons = new ol.layer.Vector({
        source: Source_Ecomons,
        style: EcomonsStyle,
        renderBuffer: 200
    });
    Layer_Ecomons.set('name', 'Ecomons');
    Layer_Ecomons.setVisible(false);
    Layer_Ecomons.setOpacity(1);
    layers.push(Layer_Ecomons);

    var KazHydrometAirPostsStyle = new ol.style.Style({
        image: new ol.style.Icon(({
            src: '/images/KazHydrometAirPosts.png'
        }))
    });
    var KazHydrometAirPostsLayerJson = $("#KazHydrometAirPostsLayerJson").val();
    var Source_KazHydrometAirPosts = new ol.source.Vector({
        features: (new ol.format.GeoJSON()).readFeatures(KazHydrometAirPostsLayerJson, {
            dataProjection: 'EPSG:4326',
            featureProjection: 'EPSG:3857'
        })
    });
    var Layer_KazHydrometAirPosts = new ol.layer.Vector({
        source: Source_KazHydrometAirPosts,
        style: KazHydrometAirPostsStyle,
        renderBuffer: 200
    });
    Layer_KazHydrometAirPosts.set('name', 'KazHydrometAirPosts');
    Layer_KazHydrometAirPosts.setVisible(false);
    Layer_KazHydrometAirPosts.setOpacity(1);
    layers.push(Layer_KazHydrometAirPosts);

    var KazHydrometSoilPostsStyle = new ol.style.Style({
        image: new ol.style.Icon(({
            src: '/images/KazHydrometSoilPosts.png'
        }))
    });
    var KazHydrometSoilPostsLayerJson = $("#KazHydrometSoilPostsLayerJson").val();
    var Source_KazHydrometSoilPosts = new ol.source.Vector({
        features: (new ol.format.GeoJSON()).readFeatures(KazHydrometSoilPostsLayerJson, {
            dataProjection: 'EPSG:4326',
            featureProjection: 'EPSG:3857'
        })
    });
    var Layer_KazHydrometSoilPosts = new ol.layer.Vector({
        source: Source_KazHydrometSoilPosts,
        style: KazHydrometSoilPostsStyle,
        renderBuffer: 200
    });
    Layer_KazHydrometSoilPosts.set('name', 'KazHydrometSoilPosts');
    Layer_KazHydrometSoilPosts.setVisible(false);
    Layer_KazHydrometSoilPosts.setOpacity(1);
    layers.push(Layer_KazHydrometSoilPosts);

    var PollutionSourcesStyle = new ol.style.Style({
        image: new ol.style.Icon(({
            src: '/images/PollutionSources.png'
        }))
    });
    var PollutionSourcesLayerJson = $("#PollutionSourcesLayerJson").val();
    var Source_PollutionSources = new ol.source.Vector({
        features: (new ol.format.GeoJSON()).readFeatures(PollutionSourcesLayerJson, {
            dataProjection: 'EPSG:4326',
            featureProjection: 'EPSG:3857'
        })
    });
    var Layer_PollutionSources = new ol.layer.Vector({
        source: Source_PollutionSources,
        style: PollutionSourcesStyle,
        renderBuffer: 200
    });
    Layer_PollutionSources.set('name', 'PollutionSources');
    Layer_PollutionSources.setVisible(false);
    Layer_PollutionSources.setOpacity(1);
    layers.push(Layer_PollutionSources);

    var Source_Isolines = new ol.source.Vector({
        features: (new ol.format.GeoJSON())
    });

    var IsolinesStyle = new ol.style.Style({
        stroke: new ol.style.Stroke({
            color: [255, 100, 25, 1],
            width: 2
        })
    });

    var isolinesLayer = new ol.layer.Vector({
        source: Source_Isolines,
        style: IsolinesStyle
    });

    isolinesLayer.set('name', 'Isolines');
    isolinesLayer.setVisible(false);
    isolinesLayer.setOpacity(1);
    layers.push(isolinesLayer);

    format = new ol.format.GeoJSON();

    var SanitaryZoneStyle = new ol.style.Style({
        image: new ol.style.Icon(({
            //src: '/images/SanitaryZone.png'
            src: '/images/KazHydrometSoilPosts.png'
        }))
    });
    var SanitaryZoneLayerJson = $("#SanitaryZoneLayerJson").val();
    var Source_SanitaryZone = new ol.source.Vector({
        features: (new ol.format.GeoJSON())
    });
    var Layer_SanitaryZone = new ol.layer.Vector({
        source: Source_SanitaryZone,
        style: SanitaryZoneStyle,
        renderBuffer: 200
    });
    Layer_SanitaryZone.set('name', 'SanitaryZone');
    Layer_SanitaryZone.setVisible(false);
    Layer_SanitaryZone.setOpacity(1);
    layers.push(Layer_SanitaryZone);

    //var Source_allsum201702_avg = new ol.source.ImageWMS({
    //    url: 'http://' + 'localhost' + ':' + '8080' + '/geoserver/SmartEco/wms?',
    //    params: {
    //        'LAYERS': 'SmartEco:allsum201702_avg'
    //    },
    //    serverType: 'geoserver'
    //});
    //var Layer_allsum201702_avg = new ol.layer.Image({
    //    source: Source_allsum201702_avg
    //});
    //Layer_allsum201702_avg.set('name', 'allsum201702_avg');
    ////Layer_allsum201702_avg.setVisible(false);
    //Layer_allsum201702_avg.setOpacity(0.8);
    //layers.push(Layer_allsum201702_avg);

    var map = new ol.Map({
        target: 'map',
        layers: layers,
        view: new ol.View({
            //center: ol.proj.fromLonLat([68.291, 47.5172]),
            center: ol.proj.fromLonLat([77.00667, 43.42417]),
            zoom: 14
        })
    });

    var gslayers = [],
        gslayersdata = [];

    $.ajax({
        url: '@Url.Action("GetLayers", "Layers")',
        //data: { KATOId: KATOId },
        type: 'POST',
        success: function (data) {
            $.each(data, function () {
                var Source_new_gs_layer = new ol.source.ImageWMS({
                    url: 'http://' + geoserverAddress + ':' + geoserverPort + '/geoserver/SmartEco/wms?',
                    params: {
                        'LAYERS': 'SmartEco:' + this.geoServerName
                    },
                    serverType: 'geoserver'
                });
                var Layer_new_gs_layer = new ol.layer.Image({
                    source: Source_new_gs_layer
                });
                Layer_new_gs_layer.set('name', this.geoServerName);
                Layer_new_gs_layer.setVisible(false);
                Layer_new_gs_layer.setOpacity(0.8);
                gslayers.push(Layer_new_gs_layer);
                map.addLayer(Layer_new_gs_layer);
                this.gslayer = Layer_new_gs_layer;
                gslayersdata.push(this);
            });
        },
        error: function () {
        }
    });

    function ChangeLayers() {
        //alert(gslayersdata[0].geoServerName);
        gslayersdata.forEach(function (gslayerdata) {
            if (document.getElementById(gslayerdata.geoServerName).checked == true) {
                gslayerdata.gslayer.setVisible(true);
            }
            if (document.getElementById(gslayerdata.geoServerName).checked == false) {
                gslayerdata.gslayer.setVisible(false);
            }
        })
        //map.getLayers().forEach(function (layer) {
            if (document.getElementById("EcomonPoints").checked == true) {
                Layer_Ecomons.setVisible(true);
            }
            if (document.getElementById("EcomonPoints").checked == false) {
                Layer_Ecomons.setVisible(false);
            }
            if (document.getElementById("KazHydrometAirPosts").checked == true) {
                Layer_KazHydrometAirPosts.setVisible(true);
            }
            if (document.getElementById("KazHydrometAirPosts").checked == false) {
                Layer_KazHydrometAirPosts.setVisible(false);
            }
            if (document.getElementById("KazHydrometSoilPosts").checked == true) {
                Layer_KazHydrometSoilPosts.setVisible(true);
            }
            if (document.getElementById("KazHydrometSoilPosts").checked == false) {
                Layer_KazHydrometSoilPosts.setVisible(false);
            }
            if (document.getElementById("PollutionSources").checked == true) {
                Layer_PollutionSources.setVisible(true);
            }
            if (document.getElementById("PollutionSources").checked == false) {
                Layer_PollutionSources.setVisible(false);
            }
            if (document.getElementById("SanitaryZone").checked == true) {
                Layer_SanitaryZone.setVisible(true);
            }
            if (document.getElementById("SanitaryZone").checked == false) {
                Layer_SanitaryZone.setVisible(false);
            }
        //})
    }

    function CalculateDissipation() {
        var temperature = $('#Temperature').val();
        var windSpeed = $('#WindSpeed').val();
        var startSpeed = $('#StartSpeed').val();
        var endSpeed = $('#EndSpeed').val();
        var stepSpeed = $('#StepSpeed').val();
        var windDirection = $('#WindDirection').val();
        var startDirection = $('#StartDirection').val();
        var endDirection = $('#EndDirection').val();
        var stepDirection = $('#StepDirection').val();
        var uSpeed = $('#uSpeed').val();
        var pollutants = $('#Pollutants').val();

        const COUNT_STEPS = 15;

        $.ajax({
            url: '@Url.Action("CalculateDissipation")',
            data: {
                temperature: temperature,
                windSpeed: windSpeed,
                startSpeed: startSpeed,
                endSpeed: endSpeed,
                stepSpeed: stepSpeed,
                windDirection: windDirection,
                startDirection: startDirection,
                endDirection: endDirection,
                stepDirection: stepDirection,
                uSpeed: uSpeed,
                pollutants: pollutants
            },
            type: 'POST',
            success: function (data) {
                var turfFeatureCollection = JSON.parse(data.answer);
                console.log(turfFeatureCollection);
                const minAndMax = turfFeatureCollection.features.reduce(
                    (values, feature) => {
                        const c = feature.properties['c_pdk'];

                        if (values.max < c) {
                            values.max = c;
                        }

                        if (values.min > c) {
                            values.min = c;
                        }

                        return values;
                    },
                    { min: Number.MAX_SAFE_INTEGER, max: 0 }
                );
                const step = (minAndMax.max - minAndMax.min) / COUNT_STEPS;

                const breaks = [];
                breaks.push(0);
                if (step > 0) {
                    for (let pdk = minAndMax.min; pdk <= minAndMax.max; pdk += step) {
                        breaks.push(pdk);
                    }

                    breaks.push(1);
                }
                breaks.push(minAndMax.max);
                const lines = turf.isolines(turfFeatureCollection, breaks, { zProperty: 'c_pdk' });
                console.log(lines);
                //isolinesLayer.getSource().addFeatures(format.readFeatures(lines));
                //isolinesLayer.setVisible(true);
                var marker = format.readFeatures(lines, {
                    dataProjection: 'EPSG:4326',
                    featureProjection: 'EPSG:3857'
                });
                //marker.transform('EPSG:4326', 'EPSG:3857');
                isolinesLayer.getSource().addFeatures(marker);
                isolinesLayer.setVisible(true);
            },
            error: function () {
            }
        });
    }
</script>

<script>
    map.on('singleclick', function (evt) {

        //var viewResolution = (map.getView().getResolution());
        var pixel = evt.pixel;

        $('#info_Ecomons').empty();
        $('#info_KazHydrometAirPosts').empty();
        $('#info_KazHydrometSoilPosts').empty();
        $('#info_PollutionSources').empty();

        var featuresEcomons = [];
        if (Layer_Ecomons.getVisible()) {
            map.forEachFeatureAtPixel(pixel, function (feature, layer) {
                if (layer == Layer_Ecomons) {
                    featuresEcomons.push(feature);
                }
            });
            var contentEcomons = '';
            for (var i = 0, ii = featuresEcomons.length; i < ii; ++i) {

                contentEcomons +=
                    '<tr>' +
                    '<th>' +
                    $('#Number').val() +
                    '</th>' +
                    '<th>' +
                    $('#Data').val() +
                    '</th>' +
                    '</tr>' +
                    '<tr>' +
                    '<td>' +
                    //'<a href="../Ecomons/Details/' + featuresEcomons[i].get('Id') + '" target="_blank">' + featuresEcomons[i].get('Name') + '</a>' +
                    featuresEcomons[i].get('Number') +
                    '</td>' +
                    '<td>' +
                    '<a href="../EcomonMonitoringPoints/Details/' + featuresEcomons[i].get('Id') + '" target="_blank">' + $('#Look').val() + '</a>' +
                    '</td>' +
                    '</tr>';
            }
            $('#info_Ecomons').append(contentEcomons);
        }

        var featuresKazHydrometAirPosts = [];
        if (Layer_KazHydrometAirPosts.getVisible()) {
            map.forEachFeatureAtPixel(pixel, function (feature, layer) {
                if (layer == Layer_KazHydrometAirPosts) {
                    featuresKazHydrometAirPosts.push(feature);
                }
            });
            var contentKazHydrometAirPosts = '';
            for (var i = 0, ii = featuresKazHydrometAirPosts.length; i < ii; ++i) {

                contentKazHydrometAirPosts +=
                    '<tr>' +
                    '<th>' +
                    $('#Number').val() +
                    '</th>' +
                    '<th>' +
                    $('#Data').val() +
                    '</th>' +
                    '</tr>' +
                    '<tr>' +
                    '<td>' +
                    //'<a href="../Ecomons/Details/' + featuresEcomons[i].get('Id') + '" target="_blank">' + featuresEcomons[i].get('Name') + '</a>' +
                    featuresKazHydrometAirPosts[i].get('Number') +
                    '</td>' +
                    '<td>' +
                    '<a href="../KazHydrometAirPosts/Details/' + featuresKazHydrometAirPosts[i].get('Id') + '" target="_blank">' + $('#Look').val() + '</a>' +
                    '</td>' +
                    '</tr>';
            }
            $('#info_KazHydrometAirPosts').append(contentKazHydrometAirPosts);
        }

        var featuresKazHydrometSoilPosts = [];
        if (Layer_KazHydrometSoilPosts.getVisible()) {
            map.forEachFeatureAtPixel(pixel, function (feature, layer) {
                if (layer == Layer_KazHydrometSoilPosts) {
                    featuresKazHydrometSoilPosts.push(feature);
                }
            });
            var contentKazHydrometSoilPosts = '';
            for (var i = 0, ii = featuresKazHydrometSoilPosts.length; i < ii; ++i) {

                contentKazHydrometSoilPosts +=
                    '<tr>' +
                    '<th>' +
                    $('#Number').val() +
                    '</th>' +
                    '<th>' +
                    $('#Data').val() +
                    '</th>' +
                    '</tr>' +
                    '<tr>' +
                    '<td>' +
                    //'<a href="../Ecomons/Details/' + featuresEcomons[i].get('Id') + '" target="_blank">' + featuresEcomons[i].get('Name') + '</a>' +
                    featuresKazHydrometSoilPosts[i].get('Number') +
                    '</td>' +
                    '<td>' +
                    '<a href="../KazHydrometSoilPosts/Details/' + featuresKazHydrometSoilPosts[i].get('Id') + '" target="_blank">' + $('#Look').val() + '</a>' +
                    '</td>' +
                    '</tr>';
            }
            $('#info_KazHydrometSoilPosts').append(contentKazHydrometSoilPosts);
        }

        var featuresPollutionSources = [];
        if (Layer_PollutionSources.getVisible()) {
            map.forEachFeatureAtPixel(pixel, function (feature, layer) {
                if (layer == Layer_PollutionSources) {
                    featuresPollutionSources.push(feature);
                }
            });
            var contentPollutionSources = '';
            for (var i = 0, ii = featuresPollutionSources.length; i < ii; ++i) {

                contentPollutionSources +=
                    '<tr>' +
                    '<th>' +
                    $('#Name').val() +
                    '</th>' +
                    '<th>' +
                    $('#Data').val() +
                    '</th>' +
                    '</tr>' +
                    '<tr>' +
                    '<td>' +
                    //'<a href="../Ecomons/Details/' + featuresEcomons[i].get('Id') + '" target="_blank">' + featuresEcomons[i].get('Name') + '</a>' +
                    featuresPollutionSources[i].get('Name') +
                    '</td>' +
                    '<td>' +
                    '<a href="../PollutionSources/Details/' + featuresPollutionSources[i].get('Id') + '" target="_blank">' + $('#Look').val() + '</a>' +
                    '</td>' +
                    '</tr>';
            }
            $('#info_PollutionSources').append(contentPollutionSources);
        }
    });
</script>
