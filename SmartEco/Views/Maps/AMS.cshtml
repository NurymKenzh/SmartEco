@using System.Net
@using SmartEco.Controllers
@using Microsoft.Extensions.Localization
@using Microsoft.AspNetCore.Http
@using SmartEco.Models.AMS
@inject IStringLocalizer<SharedResources> SharedLocalizer
@{
    ViewData["Title"] = SharedLocalizer["AMS"];
}
@{
    string Role = Context.Session.GetString("Role");
}
<link href="~/lib/openlayers/ol.css" rel="stylesheet" />
<script src="~/lib/openlayers/ol.js"></script>
<link href="~/lib/jquery-ui/jquery-ui.css" rel="stylesheet" />
<script src="~/lib/jquery-ui/jquery-ui.js"></script>
<script src="~/lib/moment.js/moment.js"></script>
<script src="~/lib/chart.js/dist/Chart.js"></script>
<script src="~/lib/gasparesganga-jquery-loading-overlay/src/loadingoverlay.js"></script>
<script src="~/lib/moment.js/moment.js"></script>
<link href="~/lib/jstree/dist/themes/default/style.css" rel="stylesheet" />
<script src="~/lib/jstree/dist/jstree.js"></script>
<script src="~/lib/turf.js/turf516.min.js"></script>

<link rel="stylesheet" href="~/css/bootstrap.min.css" type="text/css" />
<script type="text/javascript" src="~/js/bootstrap.min.js"></script>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-multiselect/0.9.16/css/bootstrap-multiselect.css">
<script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-multiselect/0.9.16/js/bootstrap-multiselect.min.js"></script>

<style>
    /*.map {
        height: calc(100vh - 159px);
    }*/

    .ol-custom-overviewmap,
    .ol-custom-overviewmap.ol-uncollapsible {
        bottom: auto;
        left: auto;
        right: 0.5em;
        top: 2.5em;
    }

        .ol-custom-overviewmap:not(.ol-collapsed) {
            border: 1px solid black;
        }

        .ol-custom-overviewmap .ol-overviewmap-map {
            border: none;
            width: 300px;
        }

        .ol-custom-overviewmap .ol-overviewmap-box {
            border: 2px solid red;
        }

        .ol-custom-overviewmap:not(.ol-collapsed) button {
            bottom: auto;
            left: auto;
            right: 1px;
            top: 1px;
        }

    /*.ol-rotate {
            top: 170px;
            right: 0;
        }*/

    .fullscreen:-moz-full-screen {
        /*height: 100%;*/
        height: calc(100vh - 159px);
    }

    .fullscreen:-webkit-full-screen {
        /*height: 100%;*/
        height: calc(100vh - 159px);
    }

    .fullscreen:-ms-fullscreen {
        /*height: 100%;*/
        height: calc(100vh - 159px);
    }

    .fullscreen:fullscreen {
        /*height: 100%;*/
        height: calc(100vh - 159px);
    }

    .fullscreen {
        margin-bottom: 10px;
        width: 100%;
        /*height: 400px;*/
        height: calc(100vh - 159px);
    }

    /*.ol-rotate {
        top: 3em;
    }*/

    .no-checkbox i.jstree-checkbox {
        display: none;
    }

    .is-checkbox i.jstree-checkbox {
        display: inline-block;
    }

    /*jstree word wrap*/
    .jstree-anchor {
        /*enable wrapping*/
        white-space: normal !important;
        /*ensure lower nodes move down*/
        height: auto !important;
        /*offset icon width*/
        padding-right: 24px;
    }

    .multiselect-container {
        width: 100% !important;
    }

    .dropdown-item:hover {
        border: none !important;
        color: #000;
        text-decoration: none;
        background-color: #dddee0;
    }

    .dropdown-item:focus {
        color: #000;
        text-decoration: none;
        background-color: #f5f7f9;
        outline: none;
    }

    .dropdown-item.active {
        border: none !important;
        color: #000;
        text-decoration: none;
        background-color: #ecedee;
    }
</style>

<div hidden="hidden">
    <input id="GeoServerWorkspace" type="text" value="@ViewBag.GeoServerWorkspace" />
    <input id="GeoServerAddress" type="text" value="@ViewBag.GeoServerAddress" />
    <input id="GeoServerPort" type="text" value="@ViewBag.GeoServerPort" />

    <input id="Enterprises" type="text" value="@ViewBag.Enterprises" />
    <input id="Manufactories" type="text" value="@ViewBag.Manufactories" />
    <input id="SourceAirPollutions" type="text" value="@ViewBag.SourceAirPollutions" />
    <input id="SourceEmissions" type="text" value="@ViewBag.SourceEmissions" />

    <input id="EnterprisesLayerJson" type="text" value="@ViewBag.EnterprisesLayerJson" />
    <input id="ManufactoriesLayerJson" type="text" value="@ViewBag.ManufactoriesLayerJson" />
    <input id="SourceAirPollutionsLayerJson" type="text" value="@ViewBag.SourceAirPollutionsLayerJson" />
    <input id="SourceEmissionsLayerJson" type="text" value="@ViewBag.SourceEmissionsLayerJson" />
    <input id="EnterpriseAMS" type="text" value="@SharedLocalizer["Enterprise"]" />
    <input id="ManufactoryAMS" type="text" value="@SharedLocalizer["Manufactory"]" />
    <input id="SourceAirPollutionAMS" type="text" value="@SharedLocalizer["SourceAirPollution"]" />
    <input id="SourceEmissionAMS" type="text" value="@SharedLocalizer["SourceEmission"]" />

    
    <input id="ShowHideLeftPanelText" type="text" value="@SharedLocalizer["ShowHideLeftPanelText"]" />
    <input id="ShowHideRightPanelText" type="text" value="@SharedLocalizer["ShowHideRightPanelText"]" />    
</div>

<div id="fullscreen" class="fullscreen">
    <div id="sidepanelLeft" class="sidepanel d-none">
        <label>
            @SharedLocalizer["Enterprises"]
        </label>
        <table>
            @{
                Enterprise[] enterprises = ViewBag.Enterprises;
            }
            @foreach (Enterprise enterprise in enterprises.OrderBy(m => m.Name))
            {
                <tr>
                    <td>
                        <button type="button" class="btn btn-link btn-link-post" onclick="SelectEnterprise(@enterprise.Id)">@enterprise.Name</button>
                    </td>
                </tr>
            }
        </table>
        <br />
        <hr />
        <label>
            @SharedLocalizer["Manufactories"]
        </label>
        <table>
            @{
                Manufactory[] manufactories = ViewBag.Manufactories;
            }
            @foreach (Manufactory manufactory in manufactories.OrderBy(m => m.Name))
            {
                <tr>
                    <td>
                        <button type="button" class="btn btn-link btn-link-post" onclick="SelectManufactory(@manufactory.Id)">@manufactory.Name</button>
                    </td>
                </tr>
            }
        </table>
        <br />
        <hr />
        <label>
            @SharedLocalizer["SourceAirPollutions"]
        </label>
        <table>
            @{
                SourceAirPollution[] sourceAirPollutions = ViewBag.SourceAirPollutions;
            }
            @foreach (SourceAirPollution sourceAirPollution in sourceAirPollutions.OrderBy(m => m.Name))
            {
                <tr>
                    <td>
                        <button type="button" class="btn btn-link btn-link-post" onclick="SelectSourceAirPollution(@sourceAirPollution.Id)">@sourceAirPollution.Name</button>
                    </td>
                </tr>
            }
        </table>
        <br />
        <hr />
        <label>
            @SharedLocalizer["SourceEmissions"]
        </label>
        <table>
            @{
                SourceEmission[] sourceEmissions = ViewBag.SourceEmissions;
            }
            @foreach (SourceEmission sourceEmission in sourceEmissions.OrderBy(m => m.Name))
            {
                <tr>
                    <td>
                        <button type="button" class="btn btn-link btn-link-post" onclick="SelectSourceEmission(@sourceEmission.Id)">@sourceEmission.Name</button>
                    </td>
                </tr>
            }
        </table>
        <br />
        <hr />
        <br />
        <div>
            <input type="button" value="Карта по-умолчанию" class="btn btn-default" onclick="DefaultMap()">
        </div>
        <br />
        <hr />
    </div>
    <div id="map" class="map"></div>
    <div id="sidepanelRight" class="sidepanel">
        <label>
            <input type="checkbox" id="layerEnterprisesShow" onchange="ChangeLayers()" checked="checked">
            @SharedLocalizer["Enterprises"]
            <img src="~/images/Enterprise.png" style="width:16px;height:16px;" />
        </label>
        <br />
        <input id="layerEnterprisesOpacity" type="range" min="0" max="100" value="100" oninput="ChangeLayers()" />
        <hr />
        <label>
            <input type="checkbox" id="layerManufactoriesShow" onchange="ChangeLayers()" checked="checked">
            @SharedLocalizer["Manufactories"]
            <img src="~/images/Manufactory.png" style="width:16px;height:16px;" />
        </label>
        <br />
        <input id="layerManufactoriesOpacity" type="range" min="0" max="100" value="100" oninput="ChangeLayers()" />
        <hr />
        <label>
            <input type="checkbox" id="layerSourceAirPollutionsShow" onchange="ChangeLayers()" checked="checked">
            @SharedLocalizer["SourceAirPollutions"]
            <img src="~/images/SourceAirPollution.png" style="width:16px;height:16px;" />
        </label>
        <br />
        <input id="layerSourceAirPollutionsOpacity" type="range" min="0" max="100" value="100" oninput="ChangeLayers()" />
        <hr />
        <label>
            <input type="checkbox" id="layerSourceEmissionsShow" onchange="ChangeLayers()" checked="checked">
            @SharedLocalizer["SourceEmissions"]
            <img src="~/images/SourceEmission.png" style="width:16px;height:16px;" />
        </label>
        <br />
        <input id="layerSourceEmissionsOpacity" type="range" min="0" max="100" value="100" oninput="ChangeLayers()" />
        <hr />
        

        <label><input type="checkbox" id="layerBaseShow" onchange="ChangeLayers()" checked="checked">@SharedLocalizer["BaseLayer"]</label>
        <br />
        <input id="layerBaseOpacity" type="range" min="0" max="100" value="100" oninput="ChangeLayers()" />
        <select id="layerBaseType" class="form-control form-control-sm" onchange="ChangeLayers()">
            <option value="OSM">OpenStreetMap</option>
            <option value="BingAerialWithLabels">Bing Aerial</option>
            <option value="BingRoadStatic">Bing Road (static)</option>
            <option value="BingRoadDynamic">Bing Road (dynamic)</option>
            <option value="HERENormalDay">HERE Normal Day</option>
            <option value="HERENormalDayTransit">HERE Normal Day Transit</option>
            <option value="HERETerrainDay">HERE Terrain Day</option>
            <option value="HEREHybridDay">HERE Hybrid Day</option>
            <option value="StamenWatercolor">Stamen Watercolor</option>
            <option value="StamenTerrain">Stamen Terrain</option>
            <option value="StamenToner">Stamen Toner</option>
            <option value="ArcGIS">ArcGIS</option>
            <option value="ThunderforestOpenCycleMap">Thunderforest OpenCycleMap</option>
            <option value="ThunderforestTransport">Thunderforest Transport</option>
            <option value="ThunderforestLandscape">Thunderforest Landscape</option>
            <option value="ThunderforestOutdoors">Thunderforest Outdoors</option>
            <option value="ThunderforestTransportDark">Thunderforest Transport Dark</option>
            <option value="ThunderforestSpinalMap">Thunderforest Spinal Map</option>
            <option value="ThunderforestPioneer">Thunderforest Pioneer</option>
            <option value="ThunderforestMobileAtlas">Thunderforest Mobile Atlas</option>
            <option value="ThunderforestNeighbourhood">Thunderforest Neighbourhood</option>
        </select>
        <br />
        <hr />
    </div>
</div>

<div hidden="hidden">
    <div id="dialogAMSInfo" title="">
        <div id="divEnterprise" class="dialog-info-content">
            <ul>
                <li><a href="#divEnterpriseInfo">@SharedLocalizer["Info"]</a></li>
            </ul>
            <div id="divEnterpriseInfo" class="dialog-info-tab-div">
                <input id="EnterpriseId" type="hidden" />
                <table class="table-bordered dialog-info-table">
                    <tr>
                        <td>
                            @SharedLocalizer["Name"]
                        </td>
                        <td class="enterprise-name"></td>
                    </tr>
                    <tr>
                        <td>
                            @SharedLocalizer["City"]
                        </td>
                        <td id="EnterpriseCity"></td>
                    </tr>
                    <tr>
                        <td>
                            @SharedLocalizer["Company"]
                        </td>
                        <td class="company-name"></td>
                    </tr>
                </table>
            </div>
        </div>
        <div id="divManufactory" class="dialog-info-content">
            <ul>
                <li><a href="#divManufactoryInfo">@SharedLocalizer["Info"]</a></li>
            </ul>
            <div id="divManufactoryInfo" class="dialog-info-tab-div">
                <input id="ManufactoryId" type="hidden" />
                <table class="table-bordered dialog-info-table">
                    <tr>
                        <td>
                            @SharedLocalizer["Name"]
                        </td>
                        <td class="manufactory-name"></td>
                    </tr>
                    <tr>
                        <td>
                            @SharedLocalizer["Enterprise"]
                        </td>
                        <td class="enterprise-name"></td>
                    </tr>
                    <tr>
                        <td>
                            @SharedLocalizer["Company"]
                        </td>
                        <td class="company-name"></td>
                    </tr>
                </table>
            </div>
        </div>
        <div id="divSourceAirPollution" class="dialog-info-content">
            <ul>
                <li><a href="#divSourceAirPollutionInfo">@SharedLocalizer["Info"]</a></li>
            </ul>
            <div id="divSourceAirPollutionInfo" class="dialog-info-tab-div">
                <input id="SourceAirPollutionId" type="hidden" />
                <table class="table-bordered dialog-info-table">
                    <tr>
                        <td>
                            @SharedLocalizer["Name"]
                        </td>
                        <td class="source-air-pollution-name"></td>
                    </tr>
                    <tr>
                        <td>
                            @SharedLocalizer["Manufactory"]
                        </td>
                        <td class="manufactory-name"></td>
                    </tr>
                    <tr>
                        <td>
                            @SharedLocalizer["Enterprise"]
                        </td>
                        <td class="enterprise-name"></td>
                    </tr>
                    <tr>
                        <td>
                            @SharedLocalizer["Company"]
                        </td>
                        <td class="company-name"></td>
                    </tr>
                </table>
            </div>
        </div>
        <div id="divSourceEmission" class="dialog-info-content">
            <ul>
                <li><a href="#divSourceEmissionInfo">@SharedLocalizer["Info"]</a></li>
            </ul>
            <div id="divSourceEmissionInfo" class="dialog-info-tab-div">
                <input id="SourceEmissionId" type="hidden" />
                <table class="table-bordered dialog-info-table">
                    <tr>
                        <td>
                            @SharedLocalizer["Name"]
                        </td>
                        <td id="SourceEmissionName"></td>
                    </tr>
                    <tr>
                        <td>
                            @SharedLocalizer["SourceAirPollution"]
                        </td>
                        <td class="source-air-pollution-name"></td>
                    </tr>
                    <tr>
                        <td>
                            @SharedLocalizer["Manufactory"]
                        </td>
                        <td class="manufactory-name"></td>
                    </tr>
                    <tr>
                        <td>
                            @SharedLocalizer["Enterprise"]
                        </td>
                        <td class="enterprise-name"></td>
                    </tr>
                    <tr>
                        <td>
                            @SharedLocalizer["Company"]
                        </td>
                        <td class="company-name"></td>
                    </tr>
                </table>
            </div>
        </div>
    </div>
</div>

@* layers *@
<script>
    var layers = [];
    var inactivePosts = [];
    var inactiveKazHydrometPosts = [];
    var colorPostsId = [],
        colorPostsAQI = [];

    var HEREappId = 'SLdBasp4s1oq2oUbVGxy';
    var HEREappCode = 'D9-h9iVhjgUB_9eUlFETXA';

    var Source_OSM = new ol.source.OSM();
    layers.push(new ol.layer.Tile({
        source: Source_OSM
    }));
    layers[0].set('name', 'Base');

    Source_BingAerialWithLabels = new ol.source.BingMaps({
        key: 'AvXWBeyEt0tMq0Cmi-TdlXA6qG2GDpuV1UcSbSqNXbfHcQ41GFYtjpu0gz8RS6-b',
        imagerySet: 'AerialWithLabels',
    });
    Source_BingRoadStatic = new ol.source.BingMaps({
        key: 'AvXWBeyEt0tMq0Cmi-TdlXA6qG2GDpuV1UcSbSqNXbfHcQ41GFYtjpu0gz8RS6-b',
        imagerySet: 'Road',
    });
    Source_BingRoadDynamic = new ol.source.BingMaps({
        key: 'AvXWBeyEt0tMq0Cmi-TdlXA6qG2GDpuV1UcSbSqNXbfHcQ41GFYtjpu0gz8RS6-b',
        imagerySet: 'RoadOnDemand',
    });

    var urlTpl = 'https://{1-4}.{base}.maps.cit.api.here.com' +
        '/{type}/2.1/maptile/newest/{scheme}/{z}/{x}/{y}/256/png' +
        '?app_id={app_id}&app_code={app_code}';
    function HEREcreateUrl(tpl, HERElayerDesc) {
        return tpl
            .replace('{base}', HERElayerDesc.base)
            .replace('{type}', HERElayerDesc.type)
            .replace('{scheme}', HERElayerDesc.scheme)
            .replace('{app_id}', HERElayerDesc.app_id)
            .replace('{app_code}', HERElayerDesc.app_code);
    };

    var HERElayerDescNormalDay = {
        base: 'base',
        type: 'maptile',
        scheme: 'normal.day',
        app_id: HEREappId,
        app_code: HEREappCode
    };
    var Source_HERENormalDay = new ol.source.XYZ({
        url: HEREcreateUrl(urlTpl, HERElayerDescNormalDay),
        attributions: 'Map Tiles &copy; ' + new Date().getFullYear() + ' ' +
            '<a href="http://developer.here.com">HERE</a>'
    });

    var HERElayerDescNormalDayTransit = {
        base: 'base',
        type: 'maptile',
        scheme: 'normal.day.transit',
        app_id: HEREappId,
        app_code: HEREappCode
    };
    var Source_HERENormalDayTransit = new ol.source.XYZ({
        url: HEREcreateUrl(urlTpl, HERElayerDescNormalDayTransit),
        attributions: 'Map Tiles &copy; ' + new Date().getFullYear() + ' ' +
            '<a href="http://developer.here.com">HERE</a>'
    });

    var HERElayerDescTerrainDay = {
        base: 'aerial',
        type: 'maptile',
        scheme: 'terrain.day',
        app_id: HEREappId,
        app_code: HEREappCode
    };
    var Source_HERETerrainDay = new ol.source.XYZ({
        url: HEREcreateUrl(urlTpl, HERElayerDescTerrainDay),
        attributions: 'Map Tiles &copy; ' + new Date().getFullYear() + ' ' +
            '<a href="http://developer.here.com">HERE</a>'
    });

    var HERElayerDescHybridDay = {
        base: 'aerial',
        type: 'maptile',
        scheme: 'hybrid.day',
        app_id: HEREappId,
        app_code: HEREappCode
    };
    var Source_HEREHybridDay = new ol.source.XYZ({
        url: HEREcreateUrl(urlTpl, HERElayerDescHybridDay),
        attributions: 'Map Tiles &copy; ' + new Date().getFullYear() + ' ' + '<a href="http://developer.here.com">HERE</a>'
    });

    var Source_StamenWatercolor = new ol.source.Stamen({
        layer: 'watercolor'
    });

    var Source_StamenTerrain = new ol.source.Stamen({
        layer: 'terrain'
    });

    var Source_StamenToner = new ol.source.Stamen({
        layer: 'toner'
    });

    var Source_ArcGIS = new ol.source.XYZ({
        attributions: 'Tiles © <a href="https://services.arcgisonline.com/ArcGIS/' +
            'rest/services/World_Topo_Map/MapServer">ArcGIS</a>',
        url: 'https://server.arcgisonline.com/ArcGIS/rest/services/' +
            'World_Topo_Map/MapServer/tile/{z}/{y}/{x}'
    });

    var Source_ThunderforestOpenCycleMap = new ol.source.XYZ({
        url: 'https://{a-c}.tile.thunderforest.com/cycle/{z}/{x}/{y}.png' +
            '?apikey=6746f4299ea3479aba8726b09f049c1b'
    });

    var Source_ThunderforestTransport = new ol.source.XYZ({
        url: 'https://{a-c}.tile.thunderforest.com/transport/{z}/{x}/{y}.png' +
            '?apikey=6746f4299ea3479aba8726b09f049c1b'
    });

    var Source_ThunderforestLandscape = new ol.source.XYZ({
        url: 'https://{a-c}.tile.thunderforest.com/landscape/{z}/{x}/{y}.png' +
            '?apikey=6746f4299ea3479aba8726b09f049c1b'
    });

    var Source_ThunderforestOutdoors = new ol.source.XYZ({
        url: 'https://{a-c}.tile.thunderforest.com/outdoors/{z}/{x}/{y}.png' +
            '?apikey=6746f4299ea3479aba8726b09f049c1b'
    });

    var Source_ThunderforestTransportDark = new ol.source.XYZ({
        url: 'https://{a-c}.tile.thunderforest.com/transport-dark/{z}/{x}/{y}.png' +
            '?apikey=6746f4299ea3479aba8726b09f049c1b'
    });

    var Source_ThunderforestSpinalMap = new ol.source.XYZ({
        url: 'https://{a-c}.tile.thunderforest.com/spinal-map/{z}/{x}/{y}.png' +
            '?apikey=6746f4299ea3479aba8726b09f049c1b'
    });

    var Source_ThunderforestPioneer = new ol.source.XYZ({
        url: 'https://{a-c}.tile.thunderforest.com/pioneer/{z}/{x}/{y}.png' +
            '?apikey=6746f4299ea3479aba8726b09f049c1b'
    });

    var Source_ThunderforestMobileAtlas = new ol.source.XYZ({
        url: 'https://{a-c}.tile.thunderforest.com/mobile-atlas/{z}/{x}/{y}.png' +
            '?apikey=6746f4299ea3479aba8726b09f049c1b'
    });

    var Source_ThunderforestNeighbourhood = new ol.source.XYZ({
        url: 'https://{a-c}.tile.thunderforest.com/neighbourhood/{z}/{x}/{y}.png' +
            '?apikey=6746f4299ea3479aba8726b09f049c1b'
    });

    var EnterprisesStyle = new ol.style.Style({
            image: new ol.style.Icon(({
                src: '/images/Enterprise.png',
                anchor: [0.5, 0.5],
                anchorXUnits: 'fraction',
                anchorYUnits: 'fraction'
            })),
            text: new ol.style.Text({
                font: '13px Calibri,sans-serif',
                fill: new ol.style.Fill({
                    color: '#000',
                }),
                stroke: new ol.style.Stroke({
                    color: '#fff',
                    width: 4,
                }),
                offsetY: -58
            })
        });    
    var EnterprisesLayerJson = $("#EnterprisesLayerJson").val();
    var Source_Enterprises = new ol.source.Vector({
        features: (new ol.format.GeoJSON()).readFeatures(EnterprisesLayerJson, {
            dataProjection: 'EPSG:4326',
            featureProjection: 'EPSG:3857'
        })
    });
    var Layer_Enterprises = new ol.layer.Vector({
        source: Source_Enterprises,
        style: EnterprisesStyle,
        renderBuffer: 200
    });
    Layer_Enterprises.set('name', 'Enterprises');
    layers.push(Layer_Enterprises);

    var ManufactoriesStyle = new ol.style.Style({
            image: new ol.style.Icon(({
                src: '/images/Manufactory.png',
                anchor: [0.5, 0.5],
                anchorXUnits: 'fraction',
                anchorYUnits: 'fraction'
            })),
            text: new ol.style.Text({
                font: '13px Calibri,sans-serif',
                fill: new ol.style.Fill({
                    color: '#000',
                }),
                stroke: new ol.style.Stroke({
                    color: '#fff',
                    width: 4,
                }),
                offsetY: -58
            })
        });    
    var ManufactoriesLayerJson = $("#ManufactoriesLayerJson").val();
    var Source_Manufactories = new ol.source.Vector({
        features: (new ol.format.GeoJSON()).readFeatures(ManufactoriesLayerJson, {
            dataProjection: 'EPSG:4326',
            featureProjection: 'EPSG:3857'
        })
    });
    var Layer_Manufactories = new ol.layer.Vector({
        source: Source_Manufactories,
        style: ManufactoriesStyle,
        renderBuffer: 200
    });
    Layer_Manufactories.set('name', 'Manufactories');
    layers.push(Layer_Manufactories);

    var SourceAirPollutionsStyle = new ol.style.Style({
            image: new ol.style.Icon(({
                src: '/images/SourceAirPollution.png',
                anchor: [0.5, 0.5],
                anchorXUnits: 'fraction',
                anchorYUnits: 'fraction'
            })),
            text: new ol.style.Text({
                font: '13px Calibri,sans-serif',
                fill: new ol.style.Fill({
                    color: '#000',
                }),
                stroke: new ol.style.Stroke({
                    color: '#fff',
                    width: 4,
                }),
                offsetY: -58
            })
    });    
    var SourceAirPollutionsLayerJson = $("#SourceAirPollutionsLayerJson").val();
    var Source_SourceAirPollutions = new ol.source.Vector({
        features: (new ol.format.GeoJSON()).readFeatures(SourceAirPollutionsLayerJson, {
            dataProjection: 'EPSG:4326',
            featureProjection: 'EPSG:3857'
        })
    });
    var Layer_SourceAirPollutions = new ol.layer.Vector({
        source: Source_SourceAirPollutions,
        style: SourceAirPollutionsStyle,
        renderBuffer: 200
    });
    Layer_SourceAirPollutions.set('name', 'SourceAirPollutions');
    layers.push(Layer_SourceAirPollutions);

    var SourceEmissionsStyle = new ol.style.Style({
        image: new ol.style.Icon(({
            src: '/images/SourceEmission.png',
            anchor: [0.5, 0.5],
            anchorXUnits: 'fraction',
            anchorYUnits: 'fraction'
        })),
        text: new ol.style.Text({
            font: '13px Calibri,sans-serif',
            fill: new ol.style.Fill({
                color: '#000',
            }),
            stroke: new ol.style.Stroke({
                color: '#fff',
                width: 4,
            }),
            offsetY: -58
        })
    });
    var SourceEmissionsLayerJson = $("#SourceEmissionsLayerJson").val();
    var Source_SourceEmissions = new ol.source.Vector({
        features: (new ol.format.GeoJSON()).readFeatures(SourceEmissionsLayerJson, {
            dataProjection: 'EPSG:4326',
            featureProjection: 'EPSG:3857'
        })
    });
    var Layer_SourceEmissions = new ol.layer.Vector({
        source: Source_SourceEmissions,
        style: SourceEmissionsStyle,
        renderBuffer: 200
    });
    Layer_SourceEmissions.set('name', 'SourceEmissions');
    layers.push(Layer_SourceEmissions);

    function ChangeLayers() {
        map.getLayers().forEach(function (layer) {
            if (layer.get('name') == 'Base') {
                layer.setVisible(document.getElementById("layerBaseShow").checked);
                layer.setOpacity($('#layerBaseOpacity').val() / 100)
                if ($('#layerBaseType').val() == 'OSM') {
                    layer.setSource(Source_OSM);
                }
                else if ($('#layerBaseType').val() == 'BingAerialWithLabels') {
                    layer.setSource(Source_BingAerialWithLabels);
                }
                else if ($('#layerBaseType').val() == 'BingRoadStatic') {
                    layer.setSource(Source_BingRoadStatic);
                }
                else if ($('#layerBaseType').val() == 'BingRoadDynamic') {
                    layer.setSource(Source_BingRoadDynamic);
                }
                else if ($('#layerBaseType').val() == 'HERENormalDay') {
                    layer.setSource(Source_HERENormalDay);
                }
                else if ($('#layerBaseType').val() == 'HERENormalDayTransit') {
                    layer.setSource(Source_HERENormalDayTransit);
                }
                else if ($('#layerBaseType').val() == 'HERETerrainDay') {
                    layer.setSource(Source_HERETerrainDay);
                }
                else if ($('#layerBaseType').val() == 'HEREHybridDay') {
                    layer.setSource(Source_HEREHybridDay);
                }
                else if ($('#layerBaseType').val() == 'StamenWatercolor') {
                    layer.setSource(Source_StamenWatercolor);
                }
                else if ($('#layerBaseType').val() == 'StamenTerrain') {
                    layer.setSource(Source_StamenTerrain);
                }
                else if ($('#layerBaseType').val() == 'StamenToner') {
                    layer.setSource(Source_StamenToner);
                }
                else if ($('#layerBaseType').val() == 'ArcGIS') {
                    layer.setSource(Source_ArcGIS);
                }
                else if ($('#layerBaseType').val() == 'ThunderforestOpenCycleMap') {
                    layer.setSource(Source_ThunderforestOpenCycleMap);
                }
                else if ($('#layerBaseType').val() == 'ThunderforestTransport') {
                    layer.setSource(Source_ThunderforestTransport);
                }
                else if ($('#layerBaseType').val() == 'ThunderforestLandscape') {
                    layer.setSource(Source_ThunderforestLandscape);
                }
                else if ($('#layerBaseType').val() == 'ThunderforestOutdoors') {
                    layer.setSource(Source_ThunderforestOutdoors);
                }
                else if ($('#layerBaseType').val() == 'ThunderforestTransportDark') {
                    layer.setSource(Source_ThunderforestTransportDark);
                }
                else if ($('#layerBaseType').val() == 'ThunderforestSpinalMap') {
                    layer.setSource(Source_ThunderforestSpinalMap);
                }
                else if ($('#layerBaseType').val() == 'ThunderforestPioneer') {
                    layer.setSource(Source_ThunderforestPioneer);
                }
                else if ($('#layerBaseType').val() == 'ThunderforestMobileAtlas') {
                    layer.setSource(Source_ThunderforestMobileAtlas);
                }
                else if ($('#layerBaseType').val() == 'ThunderforestNeighbourhood') {
                    layer.setSource(Source_ThunderforestNeighbourhood);
                }
            }
            if (layer.get('name') == 'Enterprises') {
                layer.setVisible(document.getElementById("layerEnterprisesShow").checked);
                layer.setOpacity($('#layerEnterprisesOpacity').val() / 100)
            }
            if (layer.get('name') == 'Manufactories') {
                layer.setVisible(document.getElementById("layerManufactoriesShow").checked);
                layer.setOpacity($('#layerManufactoriesOpacity').val() / 100)
            }
            if (layer.get('name') == 'SourceAirPollutions') {
                layer.setVisible(document.getElementById("layerSourceAirPollutionsShow").checked);
                layer.setOpacity($('#layerSourceAirPollutionsOpacity').val() / 100)
            }
            if (layer.get('name') == 'SourceEmissions') {
                layer.setVisible(document.getElementById("layerSourceEmissionsShow").checked);
                layer.setOpacity($('#layerSourceEmissionsOpacity').val() / 100)
            }
        })
    }
</script>

@* Panels *@
<script>
    // левая панель
    window.app = {};
    var app = window.app;
    app.ShowHideSidePanelLeft = function (opt_options) {
        var options = opt_options || {};
        var button = document.createElement('button');
        button.id = "sidepanelleftshowhide";
        button.innerHTML = '»';
        button.title = $("#ShowHideLeftPanelText").val();
        var this_ = this;
        var handleShowHideSidePanelLeft = function () {
            if (document.getElementById("sidepanelLeft").offsetWidth == 0) {
                if (document.getElementById("sidepanelRight").offsetWidth != 0) {
                    $('#sidepanelLeft').addClass("d-block");
                    button.innerHTML = '«';
                    $('#map').css("width", "60%");
                    map.updateSize();
                }
                else {
                    $('#sidepanelLeft').addClass("d-block");
                    button.innerHTML = '«';
                    $('#map').css("width", "80%");
                    map.updateSize();
                }
            }
            else {
                if (document.getElementById("sidepanelRight").offsetWidth != 0) {
                    $('#sidepanelLeft').removeClass("d-block");
                    button.innerHTML = '»';
                    $('#map').css("width", "80%");
                    map.updateSize();
                }
                else {
                    $('#sidepanelLeft').removeClass("d-block");
                    button.innerHTML = '»';
                    $('#map').css("width", "100%");
                    map.updateSize();
                }
            }
        };
        button.addEventListener('click', handleShowHideSidePanelLeft, false);
        var element = document.createElement('div');
        element.className = 'sidepanelLeft-hide ol-unselectable ol-control';
        element.appendChild(button);
        ol.control.Control.call(this, {
            element: element,
            target: options.target
        });
    }
    ol.inherits(app.ShowHideSidePanelLeft, ol.control.Control);

    // правая панель
    app.ShowHideSidePanelRight = function (opt_options) {
        var options = opt_options || {};
        var button = document.createElement('button');
        button.id = "sidepanelrightshowhide";
        button.innerHTML = '»';
        button.title = $("#ShowHideRightPanelText").val();
        var this_ = this;
        var handleShowHideSidePanelRight = function () {
            if (document.getElementById("sidepanelRight").offsetWidth == 0) {
                if (document.getElementById("sidepanelLeft").offsetWidth != 0) {
                    $('#sidepanelRight').addClass("d-block");
                    button.innerHTML = '»';
                    $('#map').css("width", "60%");
                    map.updateSize();
                }
                else {
                    $('#sidepanelRight').addClass("d-block");
                    button.innerHTML = '»';
                    $('#map').css("width", "80%");
                    map.updateSize();
                }
            }
            else {
                if (document.getElementById("sidepanelLeft").offsetWidth != 0) {
                    $('#sidepanelRight').removeClass("d-block");
                    button.innerHTML = '«';
                    $('#map').css("width", "80%");
                    map.updateSize();
                }
                else {
                    $('#sidepanelRight').removeClass("d-block");
                    button.innerHTML = '«';
                    $('#map').css("width", "100%");
                    map.updateSize();
                }
            }
        };
        button.addEventListener('click', handleShowHideSidePanelRight, false);
        var element = document.createElement('div');
        element.className = 'sidepanelRight-hide ol-unselectable ol-control';
        element.appendChild(button);
        ol.control.Control.call(this, {
            element: element,
            target: options.target
        });
    }
    ol.inherits(app.ShowHideSidePanelRight, ol.control.Control);

    $(document).ready(function (e) {
        map.updateSize();
        $('#sidepanelRight').addClass("d-none d-block");
        $('#map').css("width", "80%");
        map.updateSize();
        window.addEventListener('resize', function (event) {
            $('#map').css("width", "100%");
            map.updateSize();
            // показать правую панель
            $('#sidepanelRight').removeClass("d-block");
            var button = document.getElementById('sidepanelrightshowhide');
            button.innerHTML = '«';
            // показать левую панель
            $('#sidepanelLeft').removeClass("d-block");
            var button = document.getElementById('sidepanelleftshowhide');
            button.innerHTML = '»';
            map.updateSize();
        });
    });
</script>

@* map *@
<script>
    function GetCookie(cookieName) {
        var results = document.cookie.match('(^|;) ?' + cookieName + '=([^;]*)(;|$)');
        if (results) {
            return (unescape(results[2]));
        }
        else {
            return null;
        }
    }

    var getCoords, getZoom;
    if (GetCookie("zoomAMS") == null) {
        getZoom = 5.15;
        document.cookie = "zoomAMS=" + getZoom;
    }
    else {
        getZoom = Number.parseFloat(GetCookie("zoomAMS"));
    }
    if (GetCookie("coordsAMS") == null) {
        getCoords = [66.14, 48.57];
        document.cookie = "coordsAMS=" + getCoords;
    }
    else {
        var coordsStringArr = GetCookie("coordsAMS").split(',');
        getCoords = [Number.parseFloat(coordsStringArr[0]), Number.parseFloat(coordsStringArr[1])];
    }

    var overviewMapControl = new ol.control.OverviewMap({
        className: 'ol-overviewmap ol-custom-overviewmap',
        collapseLabel: '\u00BB',
        label: '\u00AB',
        collapsed: true
    });

    var map = new ol.Map({
        controls: new ol.control.defaults({ attributionOptions: { collapsible: true } }).extend([
            new ol.control.ScaleLine(),
            overviewMapControl,
            new app.ShowHideSidePanelRight(),
            new app.ShowHideSidePanelLeft(),
            new ol.control.FullScreen({
                source: 'fullscreen'
            })
        ]),
        target: document.getElementById('map'),//'map',
        layers: layers,
        view: new ol.View({
            center: ol.proj.fromLonLat(getCoords),
            zoom: getZoom
        })
    });

    map.on('click', function (evt) {
        var layerName = '';
        var feature = map.forEachFeatureAtPixel(evt.pixel, function (feature, layer) {
            layerName = layer.get('name');
            if (layer.get('name') == 'Enterprises'
                || layer.get('name') == 'Manufactories'
                || layer.get('name') == 'SourceAirPollutions'
                || layer.get('name') == 'SourceEmissions') {
                return feature;
            }
        });
        if (feature) {
            if (layerName == 'Enterprises') {
                SetEnterprise(feature);
            }
            if (layerName == 'Manufactories') {
                SetManufactory(feature);
            }
            if (layerName == 'SourceAirPollutions') {
                SetSourceAirPollution(feature)
            }
            if (layerName == 'SourceEmissions') {
                SetSourceEmission(feature);
            }
        }
    });

    function DialogResize(event, ui) {
        var heightPadding = parseInt($(this).css('padding-top'), 0) + parseInt($(this).css('padding-bottom'), 0),
            widthPadding = parseInt($(this).css('padding-left'), 0) + parseInt($(this).css('padding-right'), 0),
            titlebarMargin = parseInt($(this).prev('.ui-dialog-titlebar').css('margin-bottom'), 0);
        $(this).height($(this).parent().height() - $(this).prev('.ui-dialog-titlebar').outerHeight(true) - heightPadding - titlebarMargin);
        $(this).width($(this).prev('.ui-dialog-titlebar').outerWidth(true) - widthPadding);
    }

    function DefaultMap() {
        map.getView().setZoom(5.15);
        map.getView().setCenter([7373060.94, 6266381.69]);
        document.cookie = "zoomAMS=" + 5;
        document.cookie = "coordsAMS=" + [66.14, 48.57];
    }
</script>

@* SelectEnterprise, SelectManufactory, SelectSourceAirPollution, SelectSourceEmission *@
<script>
    function SelectEnterprise(id) {
        var features = Layer_Enterprises.getSource().getFeatures();
        var feature = features.find(f => f.get('Id') === id);
        if (feature) {
            map.getView().animate({ zoom: 15 }, { center: ol.extent.getCenter(feature.getGeometry().getExtent()) });
            SetEnterprise(feature);
        }
    }
    function SetEnterprise(feature) {
        $('.dialog-info-content').hide();
        $('#EnterpriseId').val(feature.get('Id'));
        $('.company-name').text(feature.get('CompanyName'));
        $('.enterprise-name').text(feature.get('Name'));
        $('#EnterpriseCity').text(feature.get('City'));
        $('#divEnterprise').show();
        $("#divEnterprise").tabs();
        $("#dialogAMSInfo").dialog({
            resize: DialogResize,
            title: $('#EnterpriseAMS').val(),
            minHeight: 100,
            minWidth: 100,
            width: 750,
            maxHeight: window.innerHeight
        });
    }

    function SelectManufactory(id) {
        var features = Layer_Manufactories.getSource().getFeatures();
        var feature = features.find(f => f.get('Id') === id);
        if (feature) {
            map.getView().animate({ zoom: 15 }, { center: ol.extent.getCenter(feature.getGeometry().getExtent()) });
            SetManufactory(feature);
        }
    }
    function SetManufactory(feature) {
        $('.dialog-info-content').hide();
        $('#ManufactoryId').val(feature.get('Id'));
        $('.company-name').text(feature.get('CompanyName'));
        $('.enterprise-name').text(feature.get('EnterpriseName'));
        $('.manufactory-name').text(feature.get('Name'));
        $('#divManufactory').show();
        $("#divManufactory").tabs();
        $("#dialogAMSInfo").dialog({
            resize: DialogResize,
            title: $('#ManufactoryAMS').val(),
            minHeight: 100,
            minWidth: 100,
            width: 750,
            maxHeight: window.innerHeight
        });
    }

    function SelectSourceAirPollution(id) {
        var features = Layer_SourceAirPollutions.getSource().getFeatures();
        var feature = features.find(f => f.get('Id') === id);
        if (feature) {
            map.getView().animate({ zoom: 15 }, { center: ol.extent.getCenter(feature.getGeometry().getExtent()) });
            SetSourceAirPollution(feature);
        }
    }
    function SetSourceAirPollution(feature) {
        $('.dialog-info-content').hide();
        $('#SourceAirPollutionId').val(feature.get('Id'));
        $('.company-name').text(feature.get('CompanyName'));
        $('.enterprise-name').text(feature.get('EnterpriseName'));
        $('.manufactory-name').text(feature.get('ManufactoryName'));
        $('.source-air-pollution-name').text(feature.get('Name'));
        $('#divSourceAirPollution').show();
        $("#divSourceAirPollution").tabs();
        $("#dialogAMSInfo").dialog({
            resize: DialogResize,
            title: $('#SourceAirPollutionAMS').val(),
            minHeight: 100,
            minWidth: 100,
            width: 750,
            maxHeight: window.innerHeight
        });
    }

    function SelectSourceEmission(id) {
        var features = Layer_SourceEmissions.getSource().getFeatures();
        var feature = features.find(f => f.get('Id') === id);
        if (feature) {
            map.getView().animate({ zoom: 15 }, { center: ol.extent.getCenter(feature.getGeometry().getExtent()) });
            SetSourceEmission(feature);
        }
    }
    function SetSourceEmission(feature) {
        $('.dialog-info-content').hide();
        $('#SourceEmissionId').val(feature.get('Id'));
        $('.company-name').text(feature.get('CompanyName'));
        $('.enterprise-name').text(feature.get('EnterpriseName'));
        $('.manufactory-name').text(feature.get('ManufactoryName'));
        $('.source-air-pollution-name').text(feature.get('SourceAirPollutionName'));
        $('#SourceEmissionName').text(feature.get('Name'));
        $('#divSourceEmission').show();
        $("#divSourceEmission").tabs();
        $("#dialogAMSInfo").dialog({
            resize: DialogResize,
            title: $('#SourceEmissionAMS').val(),
            minHeight: 100,
            minWidth: 100,
            width: 750,
        });
    }
</script>

@* FlashFeature, FlashExceedPosts, GetExceedPosts *@
<script>
    var durationExceed = 3000;
    function FlashFeature(feature) {
        var start = new Date().getTime();
        var listenerKey = map.on('postcompose', animate);

        function animate(event) {
            var vectorContext = event.vectorContext;
            var frameState = event.frameState;
            var flashGeom = feature.getGeometry().clone();
            var elapsed = frameState.time - start;
            var elapsedRatio = elapsed / durationExceed;
            // radius will be 5 at start and 30 at end.
            var radius = ol.easing.easeOut(elapsedRatio) * 25 + 5;
            var opacity = ol.easing.easeOut(1 - elapsedRatio);
            var style = new ol.style.Style({
                image: new ol.style.Circle({
                    radius: radius,
                    stroke: new ol.style.Stroke({
                        color: 'rgba(255, 0, 0, ' + opacity + ')',
                        width: 3.25 + opacity
                    })
                })
            });
            vectorContext.setStyle(style);
            vectorContext.drawGeometry(flashGeom);
            if (elapsed > durationExceed) {
                ol.Observable.unByKey(listenerKey);
                return;
            }
            map.render();
        }
        map.render();
    }

    function FlashExceedPosts() {
        window.setInterval(function () {
            var source = Layer_Enterprises.getSource();
            var features = source.getFeatures();
            for (var i in features) {
                var feature = features[i];
                if (jQuery.inArray(feature.get('Id'), exceedPosts) >= 0 && (document.getElementById("layerEnterprisesShow").checked == true)) {
                    FlashFeature(feature);
                }
            }
        }, durationExceed);
    }

    var exceedPosts = [];
    function GetExceedPosts() {
        function getExceedPosts() {
        }
        getExceedPosts();
        window.setInterval(function () {
            getExceedPosts();
        }, durationExceed * 10);
    }
</script>

@* window.setInterval (restore zoom, coords) *@
<script>
    window.setInterval(function () {
        var zoom = map.getView().getZoom();
        var coords = map.getView().getCenter();
        coords = ol.proj.transform(coords, 'EPSG:3857', 'EPSG:4326').toString();
        if (Number.parseFloat(zoom) != Number.parseFloat(GetCookie("zoomAMS"))) {
            document.cookie = "zoomAMS=" + zoom;
        }
        var coordsArray = coords.split(',');
        var coordsArrayCookie = GetCookie("coordsAMS").split(',');
        if (Number.parseFloat(coordsArray[0]) != Number.parseFloat(coordsArrayCookie[0]) || Number.parseFloat(coordsArray[1]) != Number.parseFloat(coordsArrayCookie[1])) {
            document.cookie = "coordsAMS=" + coords;
        }
    }, 1000);

    window.setInterval(function () {
        ChangeLayers();
    }, 1);
</script>

@* window.onload *@
<script>
    window.onload = function start() {
        FlashExceedPosts();
        GetExceedPosts();
        ChangeLayers();
    }
</script>