@model AirPollutionSourceListViewModel
@using SmartEco.Models.ASM.PollutionSources
@using System.Net
@using SmartEco.Controllers
@using Microsoft.Extensions.Localization
@using Microsoft.AspNetCore.Http
@using SmartEco.Models.ASM.Filsters;
@inject IStringLocalizer<SharedResources> SharedLocalizer

@{
    string Role = Context.Session.GetString("Role");
    string controller = "AirPollutionSources";
}

@*Openlayers map*@
<link href="~/lib/openlayers/ol.css" rel="stylesheet" />
<script src="~/lib/openlayers/ol.js"></script>

@*On-Off for checkbox*@
<link href="https://cdn.jsdelivr.net/gh/gitbrent/bootstrap4-toggle@3.6.1/css/bootstrap4-toggle.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/gh/gitbrent/bootstrap4-toggle@3.6.1/js/bootstrap4-toggle.min.js"></script>

<link href="~/css/asm/airPollutionSource/table.css" rel="stylesheet" />

@*<style>
    .bg-warning-opacity-25 {
        background-color: rgba(255, 193, 7, 0.25);
    }

    /*Modal window nesting*/
    .modal-backdrop ~ .modal-backdrop {
        z-index: 1051;
    }

        .modal-backdrop ~ .modal-backdrop ~ .modal-backdrop {
            z-index: 1052;
        }

            .modal-backdrop ~ .modal-backdrop ~ .modal-backdrop ~ .modal-backdrop {
                z-index: 1053;
            }
</style>*@

<table id="AirPollutionSourcesTable" class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Items.FirstOrDefault().Id)
                <br />
                <br />
                @Html.Editor("SortOrder", null, new { htmlAttributes = new { @hidden = "hidden" }, value = Model.Filter.SortOrder })
            </th>
            <th>
                <button class="btn btn-link font-weight-bold sort-btn" type="button" data-sort="@Model.Filter.NumberSort">@Html.DisplayNameFor(m => m.Items.FirstOrDefault().Number)</button>
                <br />
                @Html.Editor(nameof(Model.Filter.NumberFilter), null, new { htmlAttributes = new { @class = "form-control" }, value = "" })
            </th>
            <th>
                <button class="btn btn-link font-weight-bold sort-btn" type="button" data-sort="@Model.Filter.NameSort">@Html.DisplayNameFor(m => m.Items.FirstOrDefault().Name)</button>
                <br />
                @Html.Editor(nameof(Model.Filter.NameFilter), null, new { htmlAttributes = new { @class = "form-control" }, value = "" })
            </th>
            <th>
                <button class="btn btn-link font-weight-bold sort-btn" type="button" data-sort="@Model.Filter.RelationSort">@Html.DisplayNameFor(m => m.Items.FirstOrDefault().Relation)</button>
                <br />
                @Html.Editor(nameof(Model.Filter.RelationFilter), null, new { htmlAttributes = new { @class = "form-control" }, value = "" })
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Items.FirstOrDefault().Type.IsOrganized)
                <br />
                <br />
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Items.FirstOrDefault().Type)
                <br />
                <br />
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Items.FirstOrDefault().SourceInfo)
                <br />
                <br />
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Items.FirstOrDefault().IsActive)
                <br />
                <br />
            </th>
            <th>
                @Html.DropDownList(nameof(Model.Pager.PageSize), Model.Pager.PageSizeList, htmlAttributes: new { @class = "form-control" })
                <input type="button" id="FilterAirPollutionSources" value="@SharedLocalizer["Find"]" class="btn btn-secondary">
                <input type="button" id="ResetFilterAirPollutionSources" value="@SharedLocalizer["Reset"]" class="btn btn-outline-secondary">
            </th>
        </tr>
    </thead>
    <tbody>
        @await Html.PartialAsync("~/Views/AirPollutionSources/_AirPollutionSourcesTableBody.cshtml", Model)
    </tbody>
</table>

@if (Role == "admin" || Role == "moderator" || Role == "ASM")
{
    <button type="button" id="AddAirPollutionSource" class="btn btn-success d-block">Добавить</button>
}

@foreach (var item in Model.Items)
{
    <div id="ShowMap_@item.Id" class="modal fade show-map" tabindex="-1" role="dialog" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
            <div class="modal-content">
                @await Html.PartialAsync("~/Views/AirPollutionSources/_MapModal.cshtml", item.SourceInfo)
            </div>
        </div>
    </div>

    <div id="DeleteAirPollutionSource_@item.Id" class="modal fade" tabindex="-1" role="dialog" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
            <div class="modal-content">
                @await Html.PartialAsync("~/Views/AirPollutionSources/_DeleteAirPollutionSourceModal.cshtml", item)
            </div>
        </div>
    </div>
}

<div hidden>
    <div id="FilterEnterpriseId" data-value="@Model.Filter.EnterpriseId"></div>

    <div id="ApsGetSourcesReq" data-url="@Url.Action("GetSources", "AirPollutionSources")"></div>
    <div id="ApsCreateReq" data-url="@Url.Action("Create", "AirPollutionSources")"></div>
    <div id="ApsEditReq" data-url="@Url.Action("Edit", "AirPollutionSources")"></div>
    <div id="ApsCopyReq" data-url="@Url.Action("Copy", "AirPollutionSources")"></div>
    <div id="ApsDeleteReq" data-url="@Url.Action("Delete", "AirPollutionSources")"></div>
    <div id="ApsValidInfoReq" data-url="@Url.Action("ValidInfo", "AirPollutionSources")"></div>
</div>

<script src="~/js/asm/airPollutionSources/initializeObjects.js"></script>
<script src="~/js/asm/airPollutionSources/tableLogic.js"></script>
<script src="~/js/asm/airPollutionSources/mapCoordinates.js"></script>
<script src="~/js/asm/airPollutionSources/modalWindowNesting.js"></script>

@*<script>
    var Filter = class {
        EnterpriseId;
        NameFilter;
        NumberFilter;
        RelationFilter;

        SortOrder;
        PageNumber;
        PageSize;
    };

    var AirPollutionSource = class {
        Id;
        Number;
        Name;
        IsActive;
        TypeId;
        SourceInfo;

        SourceIndSite;
        SourceWorkshop;
        SourceArea;
    };

    var AirPollutionSourceInfo = class {
        SourceId;
        Coordinate;
        TerrainCoefficient;
        IsCalculateByGas;
        IsVerticalDeviation;
        AngleDeflection;
        AngleRotation;
        IsCovered;
        IsSignFlare;
        Hight;
        Diameter;
        RelationBackground;
    };

    var SourceIndSite = class {
        constructor(airPollutionSourceId, indSiteEnterpriseId) {
            this.AirPollutionSourceId = airPollutionSourceId;
            this.IndSiteEnterpriseId = indSiteEnterpriseId;
        }
    };

    var SourceWorkshop = class {
        constructor(airPollutionSourceId, workshopId) {
            this.AirPollutionSourceId = airPollutionSourceId;
            this.WorkshopId = workshopId;
        }
    };

    var SourceArea = class {
        constructor(airPollutionSourceId, areaId) {
            this.AirPollutionSourceId = airPollutionSourceId;
            this.AreaId = areaId;
        }
    };
</script>*@

@*<script>

    $(function () {
        $('#AirPollutionSourcesTable').find('tbody > tr').each(function () {
            RelationTextChange($(this));
            TypeTextChange($(this));
        });
    });

    $(".sort-btn").click(function (e) {
        var sortOrder = $(this).data('sort');
        $('[name="SortOrder"]').val(sortOrder);
        var dataFilter = CreateFilter();
        GetSources(dataFilter);
    });

    $("#FilterAirPollutionSources").click(function (e) {
        var dataFilter = CreateFilter();
        GetSources(dataFilter);
    });

    $("#ResetFilterAirPollutionSources").click(function (e) {
        var dataFilter = new Filter();
        dataFilter.EnterpriseId = @Model.Filter.EnterpriseId;
        GetSources(dataFilter);
    });

    function CreateFilter() {
        var dataFilter = new Filter();
        dataFilter.EnterpriseId = @Model.Filter.EnterpriseId;
        dataFilter.NumberFilter = $('[name="NumberFilter"]').val();
        dataFilter.NameFilter = $('[name="NameFilter"]').val();
        dataFilter.RelationFilter = $('[name="RelationFilter"]').val();
        dataFilter.SortOrder = $('[name="SortOrder"]').val();
        dataFilter.PageSize = $('[name="PageSize"]').val();
        return dataFilter;
    }

    function GetSources(data) {
        $.ajax({
            data: data,
            url: '@Url.Action("GetSources", "AirPollutionSources")',
            type: 'GET',
            success: function (result) {
                $('#AirPollutionSourcesTab').empty();
                $('#AirPollutionSourcesTab').html(result);
            }
        });
    }

    $(".edit-btn").click(function (e) {
        var btn = $(this);
        var editRow = GetEditRow(btn);
        var tdInputs = editRow.find('input');
        var tdSelects = editRow.find('select');

        editRow.find('.select-text').removeClass('d-inline-block').addClass('d-none');
        $(tdInputs).each(function (index) {
            var currentValue = $(this).val();
            SetCurrentValueToData(this, currentValue);

            if ($(this).is(':checkbox')) {
                $(this).parent().data('toggleOff', $(this).parent().hasClass('off'));
            }
        });
        $(tdSelects).each(function (index) {
            var currentValue = $(this).find(":selected").val();
            SetCurrentValueToData(this, currentValue);
            $(this).removeClass('d-none').addClass('d-inline-block');
        });

        EditableButtonsShow(btn, editRow, true);
    });

    $(".cancel-btn").click(function (e) {
        var btn = $(this);
        var editRow = GetEditRow(btn);
        var tdInputs = editRow.find('input');
        var tdSelects = editRow.find('select');

        editRow.find('.select-text').removeClass('d-none').addClass('d-inline-block');
        $(tdInputs).each(function (index) {
            var currentValue = $(this).data('current-value');
            SetCurrentValue(this, currentValue);

            if ($(this).is(':checkbox')) {
                if ($(this).parent().data('toggleOff') == true) {
                    $(this).closest('div').removeClass('off').addClass('off');
                }
                else {
                    $(this).closest('div').removeClass('off');
                }
            }
        });
        $(tdSelects).each(function (index) {
            var currentValue = $(this).data('current-value');
            if (currentValue != "") {
                SetCurrentValue(this, currentValue);
            }
            $(this).removeClass('d-inline-block').addClass('d-none');
        });

        editRow.find('.invalid-feedback').removeClass('d-inline-block').text('');
        EditableButtonsShow(btn, editRow);
    });

    $('[name="SaveSourceBtn"]').click(function (e) {
        var btn = $(this);
        var editRow = GetEditRow(btn);
        var dataSource = CreateSource(btn);
        editRow.find('.invalid-feedback').removeClass('d-inline-block').text('');

        $.ajax({
            data: dataSource,
            url: '@Url.Action("Edit", "AirPollutionSources")',
            type: 'POST',
            success: function (result) {
                SetDisabledFields(editRow);
                RelationTextChange(editRow);
                TypeTextChange(editRow);
                EditableButtonsShow(btn, editRow);

                editRow.find('.select-text').removeClass('d-none').addClass('d-inline-block');
                editRow.find('select').removeClass('d-inline-block').addClass('d-none');
            },
            error: function (jqXHR, textStatus, errorThrown) {
                var status = textStatus;;
                var error = $.parseJSON(jqXHR.responseText);
                if (error.Number) {
                    editRow.find('.number-invalid').addClass('d-inline-block').text(error.Number[0]);
                }
                if (error.Name) {
                    editRow.find('.name-invalid').addClass('d-inline-block').text(error.Name[0]);
                }
            }
        });
    });

    $('[name="SaveInfoBtn"]').click(function (e) {
        var btn = $(this);
        var editRow = GetEditRow(btn);
        editRow.find('.invalid-feedback').removeClass('d-inline-block').text('');
        var dataInfo = CreateInfo(editRow);

        $.ajax({
            data: dataInfo,
            url: '@Url.Action("ValidInfo", "AirPollutionSources")',
            type: 'POST',
            success: function (result) {
                SetDisabledFields(editRow);
                EditableButtonsShow(btn, editRow);
            },
            error: function (jqXHR, textStatus, errorThrown) {
                var status = textStatus;;
                var error = $.parseJSON(jqXHR.responseText);
                if (error.TerrainCoefficient) {
                    editRow.find('[name="TerrainCoefficientInvalid"]').addClass('d-inline-block').text(error.TerrainCoefficient[0]);
                }
                if (error.AngleDeflection) {
                    editRow.find('[name="AngleDeflectionInvalid"]').addClass('d-inline-block').text(error.AngleDeflection[0]);
                }
                if (error.AngleRotation) {
                    editRow.find('[name="AngleRotationInvalid"]').addClass('d-inline-block').text(error.AngleRotation[0]);
                }
                if (error.Hight) {
                    editRow.find('[name="HightInvalid"]').addClass('d-inline-block').text(error.Hight[0]);
                }
                if (error.Diameter) {
                    editRow.find('[name="DiameterInvalid"]').addClass('d-inline-block').text(error.Diameter[0]);
                }
                if (error.RelationBackground) {
                    editRow.find('[name="RelationBackgroundInvalid"]').addClass('d-inline-block').text(error.RelationBackground[0]);
                }
            }
        });
    });

    $('#AddAirPollutionSource').click(function (e) {
        var pageSize = $('[name="PageSize"]').val();
        $.ajax({
            data: {
                EnterpriseId: @Model.Filter.EnterpriseId,
                PageSize: pageSize
            },
            url: '@Url.Action("Create", "AirPollutionSources")',
            type: 'POST',
            success: function (result) {
                $('#AirPollutionSourcesTab').empty();
                $('#AirPollutionSourcesTab').html(result);
            }
        });
    });

    $('[name="DeleteSourceBtn"]').click(function (e) {
        var sourceId = $(this).val();
        var dataFilter = CreateFilter();
        dataFilter.PageNumber = $('li.page-item.active .page-link').val();

        $('#DeleteAirPollutionSource_' + sourceId + ' .close').click();
        $.ajax({
            data: {
                Id: sourceId,
                Filter: dataFilter
            },
            url: '@Url.Action("Delete", "AirPollutionSources")',
            type: 'POST',
            success: function (result) {
                $('#AirPollutionSourcesTab').empty();
                $('#AirPollutionSourcesTab').html(result);
            }
        });
    });

    $('.copy-btn').click(function (e) {
        var btn = $(this);
        var dataSource = CreateSource(btn);
        var pageSize = $('[name="PageSize"]').val();

        $.ajax({
            data: {
                EnterpriseId: @Model.Filter.EnterpriseId,
                PageSize: pageSize,
                AirPollutionSource: dataSource
            },
            url: '@Url.Action("Copy", "AirPollutionSources")',
            type: 'POST',
            success: function (result) {
                $('#AirPollutionSourcesTab').empty();
                $('#AirPollutionSourcesTab').html(result);
            }
        });
    });

    function GetEditRow(btn) {
        return btn.closest('tr').length > 0 ? btn.closest('tr') : btn.closest('dl');
    }

    function SetCurrentValueToData(elem, val) {
        $(elem).data('current-value', val);
        $(elem).prop('disabled', false);
    }

    function SetCurrentValue(elem, val) {
        $(elem).val(val);
        $(elem).data('current-value', '');
        $(elem).prop('disabled', true);
    }

    function SetDisabledFields(editRow) {
        var tdInputs = editRow.find('input');
        var tdSelects = editRow.find('select');

        $(tdInputs).each(function (index) {
            $(this).prop('disabled', true);
        });
        $(tdSelects).each(function (index) {
            $(this).prop('disabled', true);
        });
    }

    function EditableButtonsShow(btn, editRow, isEditBtnClick) {
        var editBtn = editRow.find('.edit-btn');
        var saveBtn = editRow.find('.save-btn');
        var cancelBtn = editRow.find('.cancel-btn');

        if (isEditBtnClick) {
            editBtn.removeClass('d-inline-block').addClass('d-none');
            saveBtn.removeClass('d-none').addClass('d-inline-block');
            cancelBtn.removeClass('d-none').addClass('d-inline-block');
            editRow.addClass('bg-warning-opacity-25');
            editRow.find('.form-control-plaintext').removeClass('form-control-plaintext').addClass('form-control');
            editRow.find('.btn-disabled').prop('disabled', false);
        }
        else {
            editBtn.removeClass('d-none').addClass('d-inline-block');
            saveBtn.removeClass('d-inline-block').addClass('d-none');
            cancelBtn.removeClass('d-inline-block').addClass('d-none');
            editRow.removeClass('bg-warning-opacity-25');
            editRow.find('.form-control').removeClass('form-control').addClass('form-control-plaintext');
            editRow.find('.btn-disabled').prop('disabled', true);
        }
    }

    function CreateSource(btn) {
        var editRow = GetEditRow(btn);
        var dataSource = new AirPollutionSource();

        dataSource.Id = editRow.find('[name="IdSource"]').val()
        dataSource.Number = editRow.find('[name="NumberSource"]').val();
        dataSource.Name = editRow.find('[name="NameSource"]').val();
        dataSource.IsActive = editRow.find('[name="IsActiveSource"]').val();
        dataSource.TypeId = editRow.find('[name="TypeIdSource"]').val();

        var editRowInfo = $('#ShowAirPollutionSourceInfo_' + dataSource.Id).find('dl');
        dataSource.SourceInfo = CreateInfo(editRowInfo);

        var parcedRelation = GetSourceRelation(editRow);
        if (parcedRelation.name == 'indSiteEnterprise') {
            dataSource.SourceIndSite = new SourceIndSite(dataSource.Id, parcedRelation.number);
        }
        else if (parcedRelation.name == 'workshop') {
            dataSource.SourceWorkshop = new SourceWorkshop(dataSource.Id, parcedRelation.number);
        }
        else {
            dataSource.SourceArea = new SourceArea(dataSource.Id, parcedRelation.number);
        }
        return dataSource;
    }

    function CreateInfo(editRow) {
        var dataInfo = new AirPollutionSourceInfo();
        dataInfo.SourceId = editRow.find('[name="SourceIdInfo"]').val();
        dataInfo.Coordinate = editRow.find('[name="CoordinateInfo"]').val();
        dataInfo.TerrainCoefficient = editRow.find('[name="TerrainCoefficientInfo"]').val();
        dataInfo.IsCalculateByGas = editRow.find('[name="IsCalculateByGasInfo"]').val();
        dataInfo.IsVerticalDeviation = editRow.find('[name="IsVerticalDeviationInfo"]').val();
        dataInfo.AngleDeflection = editRow.find('[name="AngleDeflectionInfo"]').val();
        dataInfo.AngleRotation = editRow.find('[name="AngleRotationInfo"]').val();
        dataInfo.IsCovered = editRow.find('[name="IsCoveredInfo"]').val();
        dataInfo.IsSignFlare = editRow.find('[name="IsSignFlareInfo"]').val();
        dataInfo.Hight = editRow.find('[name="HightInfo"]').val();
        dataInfo.Diameter = editRow.find('[name="DiameterInfo"]').val();
        dataInfo.RelationBackground = editRow.find('[name="RelationBackgroundInfo"]').val();
        return dataInfo;
    }

    $(':checkbox').change(function () {
        var currentValue = $(this).val();
        var value = currentValue == 'true' ? false : true;
        $(this).val(value);
    });

    $('[name="IsOrganizedSource"]').change(function () {
        var isOrganizedChecked = this.checked;
        var editRow = GetEditRow($(this));
        var showSourceTypes = [];
        var sourceTypes = editRow.find('[name="TypeIdSource"]').find('option');

        $(sourceTypes).each(function (index) {
            var isOrganizedType = $(this).data('organized');
            if (isOrganizedChecked == isOrganizedType) {
                $(this).prop('hidden', false);
            }
            else {
                $(this).prop('hidden', true);
            }
            $(this).removeAttr('selected');
        });
        editRow.find('[name="TypeIdSource"]').find(`[data-organized='${isOrganizedChecked}']`).first().prop('selected', true);
    });

    function RelationTextChange(row) {
        var relationText = row.find('[name="RelationSource"]').find(':selected').data('relation');
        row.find('.relation-select-text').text(relationText);
    }

    function TypeTextChange(row) {
        var typeText = row.find('[name="TypeIdSource"]').find(':selected').text();
        row.find('.type-select-text').text(typeText);
    }

    function GetSourceRelation(editRow) {
        var relationValue = editRow.find('[name="RelationSource"]').find(':selected').val();
        var parcedValue = ParseRelationValue(relationValue);
        return parcedValue;
    }

    function ParseRelationValue(value) {
        var valueArray = value.split('_');
        var valueName = valueArray[0];
        var valueNumber = valueArray[1];
        return {
            name: valueName,
            number: valueNumber
        };
    }

    //#region Pagionation

    $('.page-link').click(function (e) {;
        var dataFilter = CreateFilter();
        dataFilter.PageNumber = $(this).val();
        GetSources(dataFilter);
    });

    //#endregion Pagination
</script>*@

@*<script>
    //#region Source map

    var map, inputCoordinates, inputLongCoordinate, inputLatCoordinate;

    function InitializeInputs(editRow) {
        inputCoordinates = editRow.find('[name="CoordinateInfo"]');
        inputLongCoordinate = editRow.find('[name="CoordinateLongInfo"]');
        inputLatCoordinate = editRow.find('[name="CoordinateLatInfo"]');
        if (inputCoordinates.val()) {
            var coordinatesSplit = inputCoordinates.val().split(',');
            inputLongCoordinate.val(coordinatesSplit[0]);
            inputLatCoordinate.val(coordinatesSplit[1]);
        }
    }

    //Industrial site layer
    var vectorSource = new ol.source.Vector();
    var vectorLayer = new ol.layer.Vector({
        source: vectorSource
    });

    //Air pollution source layer
    var airSource = new ol.source.Vector();
    var airLayer = new ol.layer.Vector({
        source: airSource
    });

    function InitializeMap(sourceId, coordinates) {
        var target = 'map_' + sourceId;
        $('#' + target).empty();
        airSource.clear();

        if (coordinates) {
            var polyCoords = ParcePolyCoordinates(coordinates);
            feature = new ol.Feature({
                geometry: new ol.geom.Polygon([polyCoords])
            })
            vectorSource.addFeature(feature);
        }

        //Initialize map
        map = new ol.Map({
            target: target,
            controls: ol.control.defaults().extend([new ol.control.FullScreen()]),
            layers: [
                new ol.layer.Tile({
                    source: new ol.source.OSM()
                }),
                vectorLayer,
                airLayer
            ],
            view: new ol.View({
                center: ol.proj.fromLonLat([68.291, 47.5172]),
                zoom: 4
            })
        });

        //Set event click for map
        map.on('click', function (event) {
            var coordinates = event.coordinate;
            var point = new ol.geom.Point(
                coordinates
            );
            var featurePoint = new ol.Feature({
                geometry: point
            });
            airSource.clear();
            airSource.addFeature(featurePoint);

            //Set coordinates to inputs
            var featureClone = featurePoint.clone();
            featureClone.getGeometry().transform('EPSG:3857', 'EPSG:4326');
            var coords = featureClone.getGeometry().getCoordinates();

            inputCoordinates.val(coords);
            inputLongCoordinate.val(coords[0]);
            inputLatCoordinate.val(coords[1]);
        });

        //Set zoom to industrial site
        var featureLength = vectorSource.getFeatures().length;
        if (featureLength > 0) {
            map.getView().fit(vectorSource.getExtent(), map.getSize());
        }
    }

    function ParcePolyCoordinates(coordinates) {
        var coordsArr = coordinates.split(';');
        var polyCoords = [];

        $.each(coordsArr, function (index, coords) {
            var coord = coords.split(',');
            polyCoords.push(ol.proj.transform([parseFloat(coord[0]), parseFloat(coord[1])], 'EPSG:4326', 'EPSG:3857'));
        });
        return polyCoords;
    }

    $('.show-map').on('shown.bs.modal', function () {
        map.updateSize();
    })

    $('.clear-map').click(function (e) {
        airSource.clear();
        inputCoordinates.val('');
        inputLongCoordinate.val('');
        inputLatCoordinate.val('');
    });

    $('.coordinate-input').change(function () {
        ChangeCoordinates();
    });

    function ChangeCoordinates() {
        if (inputLongCoordinate.val() && inputLatCoordinate.val())  {
            var coordinates = [parseFloat(inputLongCoordinate.val()), parseFloat(inputLatCoordinate.val())];

            coordinates = ol.proj.transform(coordinates, 'EPSG:4326', 'EPSG:3857');
            var point = new ol.geom.Point(
                coordinates
            );
            var featurePoint = new ol.Feature({
                geometry: point
            });
            airSource.clear();
            airSource.addFeature(featurePoint);
        }
    };

    //#endregion Source map
</script>*@

@*<script>
    //#region Modal window nesting
    //handle modal windows nested up to 4 depths

    var modal_lv = 0;
    $('body').on('show.bs.modal', function (e) {
        if (modal_lv > 0)
            $(e.target).css('zIndex', 1051 + modal_lv);
        modal_lv++;
    }).on('hidden.bs.modal', function () {
        if (modal_lv > 0)
            modal_lv--;
    });

    //#endregion
</script>*@