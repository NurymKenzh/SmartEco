@using System.Net
@using SmartEco.Akimato.Controllers
@using Microsoft.Extensions.Localization
@using Microsoft.AspNetCore.Http
@inject IStringLocalizer<SharedResources> SharedLocalizer
@{
    ViewData["Title"] = SharedLocalizer["Arys"];
}
@{
    string Role = Context.Session.GetString("Role");
}
<link href="~/lib/openlayers/ol.css" rel="stylesheet" />
<script src="~/lib/openlayers/ol.js"></script>
<link href="~/lib/jquery-ui/jquery-ui.css" rel="stylesheet" />
<script src="~/lib/jquery-ui/jquery-ui.js"></script>
<script src="~/lib/moment.js/moment.js"></script>
<script src="~/lib/chart.js/dist/Chart.js"></script>
<script src="~/lib/gasparesganga-jquery-loading-overlay/src/loadingoverlay.js"></script>
<script src="~/lib/moment.js/moment.js"></script>

<!-- ol-ext -->
<link rel="stylesheet" href="https://viglino.github.io/ol-ext/dist/ol-ext.css" />
<script type="text/javascript" src="https://viglino.github.io/ol-ext/dist/ol-ext.js"></script>

<style>
    /*.map {
        height: calc(100vh - 159px);
    }*/

    .ol-custom-overviewmap,
    .ol-custom-overviewmap.ol-uncollapsible {
        bottom: auto;
        left: auto;
        right: 0.5em;
        top: 2.5em;
    }

        .ol-custom-overviewmap:not(.ol-collapsed) {
            border: 1px solid black;
        }

        .ol-custom-overviewmap .ol-overviewmap-map {
            border: none;
            width: 300px;
        }

        .ol-custom-overviewmap .ol-overviewmap-box {
            border: 2px solid red;
        }

        .ol-custom-overviewmap:not(.ol-collapsed) button {
            bottom: auto;
            left: auto;
            right: 1px;
            top: 1px;
        }

    /*.ol-rotate {
            top: 170px;
            right: 0;
        }*/

    .fullscreen:-moz-full-screen {
        /*height: 100%;*/
        height: calc(100vh - 159px);
    }

    .fullscreen:-webkit-full-screen {
        /*height: 100%;*/
        height: calc(100vh - 159px);
    }

    .fullscreen:-ms-fullscreen {
        /*height: 100%;*/
        height: calc(100vh - 159px);
    }

    .fullscreen:fullscreen {
        /*height: 100%;*/
        height: calc(100vh - 159px);
    }

    .fullscreen {
        margin-bottom: 10px;
        width: 100%;
        /*height: 400px;*/
        height: calc(100vh - 159px);
    }

    /*.ol-rotate {
        top: 3em;
    }*/
</style>

<div hidden="hidden">
    <input id="KazHydrometAirMonitoringPostsLayerJson" type="text" value="@ViewBag.KazHydrometAirMonitoringPostsLayerJson" />
    <input id="EcoserviceAirMonitoringPostsLayerJson" type="text" value="@ViewBag.EcoserviceAirMonitoringPostsLayerJson" />
    <input id="Value" type="text" value="@SharedLocalizer["Value"]" />
    <input id="DateTime" type="text" value="@SharedLocalizer["DateTime"]" />
    <input id="MPC" type="text" value="@SharedLocalizer["MPC"]" />
    <input id="KazHydrometAirPost" type="text" value="@SharedLocalizer["KazHydrometAirPost"]" />
    <input id="KazHydrometAirPosts" type="text" value="@SharedLocalizer["KazHydrometAirPosts"]" />
    <input id="EcoserviceAirPost" type="text" value="@SharedLocalizer["EcoserviceAirPost"]" />
    <input id="EcoserviceAirPosts" type="text" value="@SharedLocalizer["EcoserviceAirPosts"]" />
</div>

<div id="fullscreen" class="fullscreen">
    <div id="map" class="map"></div>
    <div class="sidepanel">
        <label>
            <input type="checkbox" id="layerEcoserviceAirMonitoringPostsShow" onchange="ChangeLayers()" checked="checked">
            @SharedLocalizer["EcoserviceAirPosts"]
            <img src="~/images/EcoserviceAirMonitoringPost.png" style="width:16px;height:16px;" />
        </label>
        <br />
        <input id="layerEcoserviceAirMonitoringPostsOpacity" type="range" min="0" max="100" value="100" oninput="ChangeLayers()" />
        <hr />
        @*<label>
            <input type="checkbox" id="layerKazHydrometAirMonitoringPostsShow" onchange="ChangeLayers()" checked="checked">
            @SharedLocalizer["KazHydrometAirPosts"]
            <img src="~/images/KazHydrometAirMonitoringPost.png" style="width:16px;height:16px;" />
        </label>
        <br />
        <input id="layerKazHydrometAirMonitoringPostsOpacity" type="range" min="0" max="100" value="100" oninput="ChangeLayers()" />
        <hr />*@
        <label><input type="checkbox" id="layerBaseShow" onchange="ChangeLayers()" checked="checked">@SharedLocalizer["BaseLayer"]</label>
        <br />
        <label style="position: relative; left: 5%;"><input type="checkbox" id="inverted" onchange="SetFilter()" checked="checked">@SharedLocalizer["Inverted"]</label>
        <br />
        <input id="layerBaseOpacity" type="range" min="0" max="100" value="100" oninput="ChangeLayers()" />
        <select id="layerBaseType" class="form-control form-control-sm" onchange="ChangeLayers()">
            <option value="OSM">OpenStreetMap</option>
            <option value="BingAerialWithLabels">Bing Aerial</option>
            <option value="BingRoadStatic">Bing Road (static)</option>
            <option value="BingRoadDynamic">Bing Road (dynamic)</option>
            <option value="HERENormalDay">HERE Normal Day</option>
            <option value="HERENormalDayTransit">HERE Normal Day Transit</option>
            <option value="HERETerrainDay">HERE Terrain Day</option>
            <option value="HEREHybridDay">HERE Hybrid Day</option>
            <option value="StamenWatercolor">Stamen Watercolor</option>
            <option value="StamenTerrain">Stamen Terrain</option>
            <option value="StamenToner">Stamen Toner</option>
            <option value="ArcGIS">ArcGIS</option>
            <option value="ThunderforestOpenCycleMap">Thunderforest OpenCycleMap</option>
            <option value="ThunderforestTransport">Thunderforest Transport</option>
            <option value="ThunderforestLandscape">Thunderforest Landscape</option>
            <option value="ThunderforestOutdoors">Thunderforest Outdoors</option>
            <option value="ThunderforestTransportDark">Thunderforest Transport Dark</option>
            <option value="ThunderforestSpinalMap">Thunderforest Spinal Map</option>
            <option value="ThunderforestPioneer">Thunderforest Pioneer</option>
            <option value="ThunderforestMobileAtlas">Thunderforest Mobile Atlas</option>
            <option value="ThunderforestNeighbourhood">Thunderforest Neighbourhood</option>
        </select>
    </div>
</div>

<div hidden="hidden">
    <div id="dialogMonitoringPostInfo" title="">
        <table id="tableKazHydrometAirMonitoringPost" class="table-bordered dialog-info-content">
            <tr>
                <td>
                    @SharedLocalizer["DataProvider"]
                </td>
                <td id="KazHydrometAirMonitoringPostDataProviderName"></td>
            </tr>
            <tr>
                <td>
                    @SharedLocalizer["PollutionEnvironment"]
                </td>
                <td id="KazHydrometAirMonitoringPostPollutionEnvironmentName"></td>
            </tr>
            <tr>
                <td>
                    @SharedLocalizer["Number"]
                </td>
                <td id="KazHydrometAirMonitoringPostNumber"></td>
            </tr>
            <tr>
                <td>
                    @SharedLocalizer["Name"]
                </td>
                <td id="KazHydrometAirMonitoringPostName"></td>
            </tr>
            <tr>
                <td>
                    @SharedLocalizer["AdditionalInformation"]
                </td>
                <td id="KazHydrometAirMonitoringPostAdditionalInformation"></td>
            </tr>
        </table>
        <div id="divEcoserviceAirPost" class="dialog-info-content">
            <ul>
                <li><a href="#divEcoserviceAirPostInfo">@SharedLocalizer["Info"]</a></li>
                <li><a href="#divEcoserviceAirPostChart">@SharedLocalizer["Chart"]</a></li>
                <li><a href="#divEcoserviceAirPostTable">@SharedLocalizer["Table"]</a></li>
            </ul>
            <div id="divEcoserviceAirPostInfo" class="dialog-info-tab-div">
                <input id="EcoserviceAirMonitoringMonitoringPostId" type="hidden" />
                <table class="table-bordered dialog-info-table">
                    <tr>
                        <td>
                            @SharedLocalizer["DataProvider"]
                        </td>
                        <td id="EcoserviceAirMonitoringPostDataProviderName"></td>
                    </tr>
                    <tr>
                        <td>
                            @SharedLocalizer["PollutionEnvironment"]
                        </td>
                        <td id="EcoserviceAirMonitoringPostPollutionEnvironmentName"></td>
                    </tr>
                    <tr>
                        <td>
                            @SharedLocalizer["Number"]
                        </td>
                        <td id="EcoserviceAirMonitoringPostNumber"></td>
                    </tr>
                    <tr>
                        <td>
                            @SharedLocalizer["Name"]
                        </td>
                        <td id="EcoserviceAirMonitoringPostName"></td>
                    </tr>
                    <tr>
                        <td>
                            @SharedLocalizer["AdditionalInformation"]
                        </td>
                        <td id="EcoserviceAirMonitoringPostAdditionalInformation"></td>
                    </tr>
                </table>
            </div>
            <div id="divEcoserviceAirPostChart" class="dialog-info-tab-div">
                @Html.DropDownList("ChartMeasuredParameterId", (IEnumerable<SelectListItem>)ViewBag.MeasuredParameters, htmlAttributes: new { @class = "form-control info-input-select", @id = "ChartMeasuredParameterId", @onchange = "ChartGetMeasuredDatas()" })
                @Html.TextBox("ChartDateFrom", (string)ViewBag.DateFrom, new { type = "date", @class = "form-control info-input", @id = "ChartDateFrom", @onchange = "ChartGetMeasuredDatas()" })
                @Html.TextBox("ChartTimeFrom", (string)ViewBag.TimeFrom, new { type = "time", @class = "form-control info-input", @id = "ChartTimeFrom", @onchange = "ChartGetMeasuredDatas()" })
                -
                @Html.TextBox("ChartDateTo", (string)ViewBag.DateTo, new { type = "date", @class = "form-control info-input", @id = "ChartDateTo", @onchange = "ChartGetMeasuredDatas()" })
                @Html.TextBox("ChartTimeTo", (string)ViewBag.TimeTo, new { type = "time", @class = "form-control info-input", @id = "ChartTimeTo", @onchange = "ChartGetMeasuredDatas()" })
                @if (Role == "admin" || Role == "moderator")
                {
                    <label>
                        @Html.CheckBox("ChartAveraged", true, new { @id = "ChartAveraged", @onchange = "ChartGetMeasuredDatas()" })
                        @SharedLocalizer["Averaged"]
                    </label>
                }
                <canvas id="chartMeasuredDatas"></canvas>
            </div>
            <div id="divEcoserviceAirPostTable" class="dialog-info-tab-div">
                @Html.DropDownList("TableMeasuredParameterId", (IEnumerable<SelectListItem>)ViewBag.MeasuredParameters, htmlAttributes: new { @class = "form-control info-input-select", @id = "TableMeasuredParameterId", @onchange = "TableGetMeasuredDatas()" })
                @Html.TextBox("TableDateFrom", (string)ViewBag.DateFrom, new { type = "date", @class = "form-control info-input", @id = "TableDateFrom", @onchange = "TableGetMeasuredDatas()" })
                @Html.TextBox("TableTimeFrom", (string)ViewBag.TimeFrom, new { type = "time", @class = "form-control info-input", @id = "TableTimeFrom", @onchange = "TableGetMeasuredDatas()" })
                -
                @Html.TextBox("TableDateTo", (string)ViewBag.DateTo, new { type = "date", @class = "form-control info-input", @id = "TableDateTo", @onchange = "TableGetMeasuredDatas()" })
                @Html.TextBox("TableTimeTo", (string)ViewBag.TimeTo, new { type = "time", @class = "form-control info-input", @id = "TableTimeTo", @onchange = "TableGetMeasuredDatas()" })
                @if (Role == "admin" || Role == "moderator")
                {
                    <label>
                        @Html.CheckBox("TableAveraged", true, new { @id = "TableAveraged", @onchange = "TableGetMeasuredDatas()" })
                        @SharedLocalizer["Averaged"]
                    </label>
                }
                <table id="tableMeasuredDatas" class="table-bordered dialog-info-tab-table">
                    <thead>
                        <tr>
                            <th>
                                @SharedLocalizer["DateTime"]
                            </th>
                            <th>
                                @SharedLocalizer["Value"]
                            </th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>
            </div>
        </div>
    </div>
</div>

@*layers*@
<script>
    var layers = [];

    var HEREappId = 'SLdBasp4s1oq2oUbVGxy';
    var HEREappCode = 'D9-h9iVhjgUB_9eUlFETXA';

    var Source_OSM = new ol.source.OSM();
    layers.push(new ol.layer.Tile({
        source: Source_OSM
    }));
    layers[0].set('name', 'Base');

    Source_BingAerialWithLabels = new ol.source.BingMaps({
        key: 'AvXWBeyEt0tMq0Cmi-TdlXA6qG2GDpuV1UcSbSqNXbfHcQ41GFYtjpu0gz8RS6-b',
        imagerySet: 'AerialWithLabels',
    });
    Source_BingRoadStatic = new ol.source.BingMaps({
        key: 'AvXWBeyEt0tMq0Cmi-TdlXA6qG2GDpuV1UcSbSqNXbfHcQ41GFYtjpu0gz8RS6-b',
        imagerySet: 'Road',
    });
    Source_BingRoadDynamic = new ol.source.BingMaps({
        key: 'AvXWBeyEt0tMq0Cmi-TdlXA6qG2GDpuV1UcSbSqNXbfHcQ41GFYtjpu0gz8RS6-b',
        imagerySet: 'RoadOnDemand',
    });

    var urlTpl = 'https://{1-4}.{base}.maps.cit.api.here.com' +
        '/{type}/2.1/maptile/newest/{scheme}/{z}/{x}/{y}/256/png' +
        '?app_id={app_id}&app_code={app_code}';
    function HEREcreateUrl(tpl, HERElayerDesc) {
        return tpl
            .replace('{base}', HERElayerDesc.base)
            .replace('{type}', HERElayerDesc.type)
            .replace('{scheme}', HERElayerDesc.scheme)
            .replace('{app_id}', HERElayerDesc.app_id)
            .replace('{app_code}', HERElayerDesc.app_code);
    };

    var HERElayerDescNormalDay = {
        base: 'base',
        type: 'maptile',
        scheme: 'normal.day',
        app_id: HEREappId,
        app_code: HEREappCode
    };
    var Source_HERENormalDay = new ol.source.XYZ({
        url: HEREcreateUrl(urlTpl, HERElayerDescNormalDay),
        attributions: 'Map Tiles &copy; ' + new Date().getFullYear() + ' ' +
            '<a href="http://developer.here.com">HERE</a>'
    });

    var HERElayerDescNormalDayTransit = {
        base: 'base',
        type: 'maptile',
        scheme: 'normal.day.transit',
        app_id: HEREappId,
        app_code: HEREappCode
    };
    var Source_HERENormalDayTransit = new ol.source.XYZ({
        url: HEREcreateUrl(urlTpl, HERElayerDescNormalDayTransit),
        attributions: 'Map Tiles &copy; ' + new Date().getFullYear() + ' ' +
            '<a href="http://developer.here.com">HERE</a>'
    });

    var HERElayerDescTerrainDay = {
        base: 'aerial',
        type: 'maptile',
        scheme: 'terrain.day',
        app_id: HEREappId,
        app_code: HEREappCode
    };
    var Source_HERETerrainDay = new ol.source.XYZ({
        url: HEREcreateUrl(urlTpl, HERElayerDescTerrainDay),
        attributions: 'Map Tiles &copy; ' + new Date().getFullYear() + ' ' +
            '<a href="http://developer.here.com">HERE</a>'
    });

    var HERElayerDescHybridDay = {
        base: 'aerial',
        type: 'maptile',
        scheme: 'hybrid.day',
        app_id: HEREappId,
        app_code: HEREappCode
    };
    var Source_HEREHybridDay = new ol.source.XYZ({
        url: HEREcreateUrl(urlTpl, HERElayerDescHybridDay),
        attributions: 'Map Tiles &copy; ' + new Date().getFullYear() + ' ' + '<a href="http://developer.here.com">HERE</a>'
    });

    var Source_StamenWatercolor = new ol.source.Stamen({
        layer: 'watercolor'
    });

    var Source_StamenTerrain = new ol.source.Stamen({
        layer: 'terrain'
    });

    var Source_StamenToner = new ol.source.Stamen({
        layer: 'toner'
    });

    var Source_ArcGIS = new ol.source.XYZ({
        attributions: 'Tiles © <a href="https://services.arcgisonline.com/ArcGIS/' +
            'rest/services/World_Topo_Map/MapServer">ArcGIS</a>',
        url: 'https://server.arcgisonline.com/ArcGIS/rest/services/' +
            'World_Topo_Map/MapServer/tile/{z}/{y}/{x}'
    });

    var Source_ThunderforestOpenCycleMap = new ol.source.XYZ({
        url: 'https://{a-c}.tile.thunderforest.com/cycle/{z}/{x}/{y}.png' +
            '?apikey=6746f4299ea3479aba8726b09f049c1b'
    });

    var Source_ThunderforestTransport = new ol.source.XYZ({
        url: 'https://{a-c}.tile.thunderforest.com/transport/{z}/{x}/{y}.png' +
            '?apikey=6746f4299ea3479aba8726b09f049c1b'
    });

    var Source_ThunderforestLandscape = new ol.source.XYZ({
        url: 'https://{a-c}.tile.thunderforest.com/landscape/{z}/{x}/{y}.png' +
            '?apikey=6746f4299ea3479aba8726b09f049c1b'
    });

    var Source_ThunderforestOutdoors = new ol.source.XYZ({
        url: 'https://{a-c}.tile.thunderforest.com/outdoors/{z}/{x}/{y}.png' +
            '?apikey=6746f4299ea3479aba8726b09f049c1b'
    });

    var Source_ThunderforestTransportDark = new ol.source.XYZ({
        url: 'https://{a-c}.tile.thunderforest.com/transport-dark/{z}/{x}/{y}.png' +
            '?apikey=6746f4299ea3479aba8726b09f049c1b'
    });

    var Source_ThunderforestSpinalMap = new ol.source.XYZ({
        url: 'https://{a-c}.tile.thunderforest.com/spinal-map/{z}/{x}/{y}.png' +
            '?apikey=6746f4299ea3479aba8726b09f049c1b'
    });

    var Source_ThunderforestPioneer = new ol.source.XYZ({
        url: 'https://{a-c}.tile.thunderforest.com/pioneer/{z}/{x}/{y}.png' +
            '?apikey=6746f4299ea3479aba8726b09f049c1b'
    });

    var Source_ThunderforestMobileAtlas = new ol.source.XYZ({
        url: 'https://{a-c}.tile.thunderforest.com/mobile-atlas/{z}/{x}/{y}.png' +
            '?apikey=6746f4299ea3479aba8726b09f049c1b'
    });

    var Source_ThunderforestNeighbourhood = new ol.source.XYZ({
        url: 'https://{a-c}.tile.thunderforest.com/neighbourhood/{z}/{x}/{y}.png' +
            '?apikey=6746f4299ea3479aba8726b09f049c1b'
    });

    //var KazHydrometAirMonitoringPostsStyle = new ol.style.Style({
    //    image: new ol.style.Icon(({
    //        src: '/images/KazHydrometAirMonitoringPost.png',
    //        anchor: [0.5, 0.5],
    //        anchorXUnits: 'fraction',
    //        anchorYUnits: 'fraction',
    //        scale: 0.0625
    //    }))
    //});
    //var KazHydrometAirMonitoringPostsLayerJson = $("#KazHydrometAirMonitoringPostsLayerJson").val();
    //var Source_KazHydrometAirMonitoringPosts = new ol.source.Vector({
    //    features: (new ol.format.GeoJSON()).readFeatures(KazHydrometAirMonitoringPostsLayerJson, {

    //        dataProjection: 'EPSG:4326',
    //        featureProjection: 'EPSG:3857'
    //    })
    //});
    //var Layer_KazHydrometAirMonitoringPosts = new ol.layer.Vector({
    //    source: Source_KazHydrometAirMonitoringPosts,
    //    style: KazHydrometAirMonitoringPostsStyle,
    //    renderBuffer: 200
    //});
    //Layer_KazHydrometAirMonitoringPosts.set('name', 'KazHydrometAirMonitoringPosts');
    //layers.push(Layer_KazHydrometAirMonitoringPosts);

    var EcoserviceAirMonitoringPostsStyle = new ol.style.Style({
        image: new ol.style.Icon(({
            src: '/images/EcoserviceAirMonitoringPost.png',
            anchor: [0.5, 0.5],
            anchorXUnits: 'fraction',
            anchorYUnits: 'fraction',
            scale: 0.0625
        }))
    });
    //var EcoserviceAirMonitoringPostsLayerJson = $("#EcoserviceAirMonitoringPostsLayerJson").val();
    //var Source_EcoserviceAirMonitoringPosts = new ol.source.Vector({
    //    features: (new ol.format.GeoJSON()).readFeatures(EcoserviceAirMonitoringPostsLayerJson, {

    //        dataProjection: 'EPSG:4326',
    //        featureProjection: 'EPSG:3857'
    //    })
    //});
    //var Layer_EcoserviceAirMonitoringPosts = new ol.layer.Vector({
    //    source: Source_EcoserviceAirMonitoringPosts,
    //    style: EcoserviceAirMonitoringPostsStyle,
    //    renderBuffer: 200
    //});
    var EcoserviceAirMonitoringPostsStyle = {
        active: new ol.style.Style({
            image: new ol.style.Icon(({
                src: '/images/EcoserviceAirMonitoringPost.png',
                anchor: [0.5, 0.5],
                anchorXUnits: 'fraction',
                anchorYUnits: 'fraction',
                scale: 0.0625
            }))
        }),
        inactive: new ol.style.Style({
            image: new ol.style.Icon(({
                src: '/images/EcoserviceAirMonitoringPostInactive.png',
                anchor: [0.5, 0.5],
                anchorXUnits: 'fraction',
                anchorYUnits: 'fraction',
                scale: 0.0625
            }))
        }),
    };
    function EcoserviceAirMonitoringPostsStyleFunction(feature) {
        if (inactivePosts.includes(feature.get('Id'))) {
            return EcoserviceAirMonitoringPostsStyle.inactive;
        }
        else {
            return EcoserviceAirMonitoringPostsStyle.active;
        }
    }
    var EcoserviceAirMonitoringPostsLayerJson = $("#EcoserviceAirMonitoringPostsLayerJson").val();
    var Source_EcoserviceAirMonitoringPosts = new ol.source.Vector({
        features: (new ol.format.GeoJSON()).readFeatures(EcoserviceAirMonitoringPostsLayerJson, {
            dataProjection: 'EPSG:4326',
            featureProjection: 'EPSG:3857'
        })
    });
    var Layer_EcoserviceAirMonitoringPosts = new ol.layer.Vector({
        source: Source_EcoserviceAirMonitoringPosts,
        style: EcoserviceAirMonitoringPostsStyleFunction,
        renderBuffer: 200
    });
    Layer_EcoserviceAirMonitoringPosts.set('name', 'EcoserviceAirMonitoringPosts');
    layers.push(Layer_EcoserviceAirMonitoringPosts);

    function ChangeLayers() {
        map.getLayers().forEach(function (layer) {
            if (layer.get('name') == 'Base') {
                layer.setVisible(document.getElementById("layerBaseShow").checked);
                layer.setOpacity($('#layerBaseOpacity').val() / 100)
                if ($('#layerBaseType').val() == 'OSM') {
                    layer.setSource(Source_OSM);
                }
                else if ($('#layerBaseType').val() == 'BingAerialWithLabels') {
                    layer.setSource(Source_BingAerialWithLabels);
                }
                else if ($('#layerBaseType').val() == 'BingRoadStatic') {
                    layer.setSource(Source_BingRoadStatic);
                }
                else if ($('#layerBaseType').val() == 'BingRoadDynamic') {
                    layer.setSource(Source_BingRoadDynamic);
                }
                else if ($('#layerBaseType').val() == 'HERENormalDay') {
                    layer.setSource(Source_HERENormalDay);
                }
                else if ($('#layerBaseType').val() == 'HERENormalDayTransit') {
                    layer.setSource(Source_HERENormalDayTransit);
                }
                else if ($('#layerBaseType').val() == 'HERETerrainDay') {
                    layer.setSource(Source_HERETerrainDay);
                }
                else if ($('#layerBaseType').val() == 'HEREHybridDay') {
                    layer.setSource(Source_HEREHybridDay);
                }
                else if ($('#layerBaseType').val() == 'StamenWatercolor') {
                    layer.setSource(Source_StamenWatercolor);
                }
                else if ($('#layerBaseType').val() == 'StamenTerrain') {
                    layer.setSource(Source_StamenTerrain);
                }
                else if ($('#layerBaseType').val() == 'StamenToner') {
                    layer.setSource(Source_StamenToner);
                }
                else if ($('#layerBaseType').val() == 'ArcGIS') {
                    layer.setSource(Source_ArcGIS);
                }
                else if ($('#layerBaseType').val() == 'ThunderforestOpenCycleMap') {
                    layer.setSource(Source_ThunderforestOpenCycleMap);
                }
                else if ($('#layerBaseType').val() == 'ThunderforestTransport') {
                    layer.setSource(Source_ThunderforestTransport);
                }
                else if ($('#layerBaseType').val() == 'ThunderforestLandscape') {
                    layer.setSource(Source_ThunderforestLandscape);
                }
                else if ($('#layerBaseType').val() == 'ThunderforestOutdoors') {
                    layer.setSource(Source_ThunderforestOutdoors);
                }
                else if ($('#layerBaseType').val() == 'ThunderforestTransportDark') {
                    layer.setSource(Source_ThunderforestTransportDark);
                }
                else if ($('#layerBaseType').val() == 'ThunderforestSpinalMap') {
                    layer.setSource(Source_ThunderforestSpinalMap);
                }
                else if ($('#layerBaseType').val() == 'ThunderforestPioneer') {
                    layer.setSource(Source_ThunderforestPioneer);
                }
                else if ($('#layerBaseType').val() == 'ThunderforestMobileAtlas') {
                    layer.setSource(Source_ThunderforestMobileAtlas);
                }
                else if ($('#layerBaseType').val() == 'ThunderforestNeighbourhood') {
                    layer.setSource(Source_ThunderforestNeighbourhood);
                }
            }
            if (layer.get('name') == 'KazHydrometAirMonitoringPosts') {
                layer.setVisible(document.getElementById("layerKazHydrometAirMonitoringPostsShow").checked);
                layer.setOpacity($('#layerKazHydrometAirMonitoringPostsOpacity').val() / 100)
            }
            if (layer.get('name') == 'EcoserviceAirMonitoringPosts') {
                layer.setVisible(document.getElementById("layerEcoserviceAirMonitoringPostsShow").checked);
                layer.setOpacity($('#layerEcoserviceAirMonitoringPostsOpacity').val() / 100)
            }
        })
    }
</script>

@*map*@
<script>
    var overviewMapControl = new ol.control.OverviewMap({
        className: 'ol-overviewmap ol-custom-overviewmap',
        collapseLabel: '\u00BB',
        label: '\u00AB',
        collapsed: false
    });

    var map = new ol.Map({
        controls: new ol.control.defaults({ attributionOptions: { collapsible: true } }).extend([
            new ol.control.ScaleLine(),
            overviewMapControl,
            new ol.control.FullScreen({
                source: 'fullscreen'
            })
        ]),
        target: document.getElementById('map'),//'map',
        layers: layers,
        view: new ol.View({
            center: ol.proj.fromLonLat([68.8, 42.43]),
            zoom: 12
        })
    });

    map.on('click', function (evt) {
        var layerName = '';
        var feature = map.forEachFeatureAtPixel(evt.pixel, function (feature, layer) {
            layerName = layer.get('name');
            if (layer.get('name') == 'KazHydrometAirMonitoringPosts'
                || layer.get('name') == 'EcoserviceAirMonitoringPosts') {
                return feature;
            }
        });
        if (feature) {
            $('.dialog-info-content').hide();
            if (layerName == 'KazHydrometAirMonitoringPosts') {
                $('#KazHydrometAirMonitoringPostDataProviderName').text(feature.get('DataProviderName'));
                $('#KazHydrometAirMonitoringPostPollutionEnvironmentName').text(feature.get('PollutionEnvironmentName'));
                $('#KazHydrometAirMonitoringPostNumber').text(feature.get('Number'));
                $('#KazHydrometAirMonitoringPostName').text(feature.get('Name'));
                $('#KazHydrometAirMonitoringPostAdditionalInformation').text(feature.get('AdditionalInformation'));
                $('#tableKazHydrometAirMonitoringPost').show();
                $("#dialogMonitoringPostInfo").dialog({
                    resize: DialogResize,
                    title: $('#KazHydrometAirPost').val(),
                    minHeight: 100,
                    minWidth: 100
                });
            }
            if (layerName == 'EcoserviceAirMonitoringPosts') {
                $('#EcoserviceAirMonitoringMonitoringPostId').val(feature.get('Id'));
                $('#EcoserviceAirMonitoringPostDataProviderName').text(feature.get('DataProviderName'));
                $('#EcoserviceAirMonitoringPostPollutionEnvironmentName').text(feature.get('PollutionEnvironmentName'));
                $('#EcoserviceAirMonitoringPostNumber').text(feature.get('Number'));
                $('#EcoserviceAirMonitoringPostName').text(feature.get('Name'));
                $('#EcoserviceAirMonitoringPostAdditionalInformation').text(feature.get('AdditionalInformation'));
                $('#divEcoserviceAirPost').show();
                $("#divEcoserviceAirPost").tabs();
                $("#dialogMonitoringPostInfo").dialog({
                    resize: DialogResize,
                    title: $('#EcoserviceAirPost').val(),
                    minHeight: 100,
                    minWidth: 100,
                    width: 750,
                    maxHeight: window.innerHeight
                });
                ChartGetMeasuredDatas();
                TableGetMeasuredDatas();
            }
        } else {
        }
    });

    function DialogResize(event, ui) {
        var heightPadding = parseInt($(this).css('padding-top'), 0) + parseInt($(this).css('padding-bottom'), 0),
            widthPadding = parseInt($(this).css('padding-left'), 0) + parseInt($(this).css('padding-right'), 0),
            titlebarMargin = parseInt($(this).prev('.ui-dialog-titlebar').css('margin-bottom'), 0);
        $(this).height($(this).parent().height() - $(this).prev('.ui-dialog-titlebar').outerHeight(true) - heightPadding - titlebarMargin);
        $(this).width($(this).prev('.ui-dialog-titlebar').outerWidth(true) - widthPadding);
    }

    // Custom filter invert map
    var layer = layers[0];

    var filter = new ol.filter.Colorize();
    layer.addFilter(filter);

    function SetFilter() {
        filter.setActive($("#inverted").prop('checked'));
        var f = 'invert';
        switch (f) {
            case 'invert':
                filter.setFilter(f);
                break;
            default:
                filter.setFilter({
                    operation: f, red: Number($("#red").val()),
                    green: Number($("#green").val()), blue: Number($("#blue").val()),
                    value: Number($("#val").val()),
                });
                break;

        }
    }
    SetFilter();
</script>

@* ChartGetMeasuredDatas, TableGetMeasuredDatas, ChangeChart *@
<script>
    function ChartGetMeasuredDatas() {
        $("#chartMeasuredDatas").LoadingOverlay("show");
        $.ajax({
            url: '@Url.Action("GetMeasuredDatas", "MeasuredDatas")',
            data: {
                MonitoringPostId: $('#EcoserviceAirMonitoringMonitoringPostId').val(),
                MeasuredParameterId: $('#ChartMeasuredParameterId').val(),
                DateFrom: $('#ChartDateFrom').val(),
                TimeFrom: $('#ChartTimeFrom').val(),
                DateTo: $('#ChartDateTo').val(),
                TimeTo: $('#ChartTimeTo').val(),
                Averaged: $('#ChartAveraged').is(':checked'),
            },
            type: 'POST',
            success: function (data) {
                ChangeChart(data);
            },
            error: function () {
                $("#chartMeasuredDatas").LoadingOverlay("hide");
            }
        })
    };

    var ChartMeasuredDatas = null;
    function ChangeChart(data) {
        if (ChartMeasuredDatas != null) {
            ChartMeasuredDatas.destroy();
        }
        var ctx1 = document.getElementById("chartMeasuredDatas").getContext('2d');
        var data1 = [],
            data2 = [];
        for (var i = 0; i < data.measureddatas.length; i++) {
            data1.push({
                'x': moment(data.measureddatas[i].dateTime),
                'y': data.measureddatas[i].value
            });
            data2.push({
                'x': moment(data.measureddatas[i].dateTime),
                'y': data.measureddatas[i].measuredParameter.mpc
            });
        }
        var datasets = [];
        datasets.push({
            label: $("#ChartMeasuredParameterId option:selected").text(),
            data: data1,
            backgroundColor: 'rgba(85,255,0,1)',
            borderColor: 'rgba(85,255,0,1)',
            borderWidth: 3,
            fill: false,
            showLine: true,
            lineTension: 0
        });
        if (data.measureddatas.length > 0) {
            if (data.measureddatas[0].measuredParameter.mpc != null) {
                datasets.push({
                    label: $("#MPC").val(),
                    data: data2,
                    backgroundColor: 'rgba(255,0,0,1)',
                    borderColor: 'rgba(255,100,100,1)',
                    borderWidth: 3,
                    fill: false,
                    showLine: true,
                    lineTension: 0
                });
            }
        }
        ChartMeasuredDatas = new Chart(ctx1, {
            type: 'scatter',
            data: {
                datasets: datasets
            },
            options: {
                spanGaps: true,
                title: {
                    display: true,
                    text: $("#EcoserviceAirPost").text()
                },
                scales: {
                    xAxes: [{
                        type: "time",
                        time: {
                            displayFormats: {
                                second: 'gggg-MM-DD HH:mm:ss',
                                minute: 'gggg-MM-DD HH:mm:ss',
                                hour: 'gggg-MM-DD HH:mm:ss',
                                day: 'gggg-MM-DD HH:mm:ss',
                                week: 'gggg-MM-DD HH:mm:ss',
                                month: 'gggg-MM-DD HH:mm:ss',
                                quarter: 'gggg-MM-DD HH:mm:ss',
                                year: 'gggg-MM-DD HH:mm:ss',
                            },
                            tooltipFormat: 'gggg-MM-DD HH:mm:ss'
                        },
                        display: true,
                        scaleLabel: {
                            display: true,
                            labelString: $("#DateTime").val()
                        }
                    }],
                    yAxes: [{
                        display: true,
                        scaleLabel: {
                            display: true,
                            labelString: $("#Value").val()
                        }
                    }]
                }
            }
        });
        $("#chartMeasuredDatas").LoadingOverlay("hide");
        }

    function TableGetMeasuredDatas() {
        $("#tableMeasuredDatas").LoadingOverlay("show");
        $.ajax({
            url: '@Url.Action("GetMeasuredDatas", "MeasuredDatas")',
            data: {
                MonitoringPostId: $('#EcoserviceAirMonitoringMonitoringPostId').val(),
                MeasuredParameterId: $('#TableMeasuredParameterId').val(),
                DateFrom: $('#TableDateFrom').val(),
                TimeFrom: $('#TableTimeFrom').val(),
                DateTo: $('#TableDateTo').val(),
                TimeTo: $('#TableTimeTo').val(),
                Averaged: $('#TableAveraged').is(':checked'),
            },
            type: 'POST',
            success: function (data) {
                ChangeTable(data);
            },
            error: function () {
                $("#tableMeasuredDatas").LoadingOverlay("hide");
            }
        })
    };

    function ChangeTable(data) {
        $("#tableMeasuredDatas").find("tr:gt(0)").remove();
        var tablehtml = '';
        for (var i = 0; i < data.measureddatas.length; i++) {
            tablehtml += '<tr><td>' + data.measureddatas[i].dateTime + '</td><td>' + data.measureddatas[i].value + '</td></tr>';
        }
        $('#tableMeasuredDatas tbody').append(tablehtml);
        $("#tableMeasuredDatas").LoadingOverlay("hide");
    };
</script>

@* FlashFeature, FlashExceedPosts, GetExceedPosts *@
<script>
    var durationExceed = 3000;
    function FlashFeature(feature) {
        var start = new Date().getTime();
        var listenerKey = map.on('postcompose', animate);

        function animate(event) {
            var vectorContext = event.vectorContext;
            var frameState = event.frameState;
            var flashGeom = feature.getGeometry().clone();
            var elapsed = frameState.time - start;
            var elapsedRatio = elapsed / durationExceed;
            // radius will be 5 at start and 30 at end.
            var radius = ol.easing.easeOut(elapsedRatio) * 25 + 5;
            var opacity = ol.easing.easeOut(1 - elapsedRatio);
            var style = new ol.style.Style({
                image: new ol.style.Circle({
                    radius: radius,
                    stroke: new ol.style.Stroke({
                        color: 'rgba(255, 0, 0, ' + opacity + ')',
                        width: 3.25 + opacity
                    })
                })
            });
            vectorContext.setStyle(style);
            vectorContext.drawGeometry(flashGeom);
            if (elapsed > durationExceed) {
                ol.Observable.unByKey(listenerKey);
                return;
            }
            map.render();
        }
        map.render();
    }

    function FlashExceedPosts() {
        window.setInterval(function () {
            var source = Layer_EcoserviceAirMonitoringPosts.getSource();
            var features = source.getFeatures();
            for (var i in features) {
                var feature = features[i];
                if (jQuery.inArray(feature.get('Id'), exceedPosts)>=0) {
                    FlashFeature(feature);
                }
            }
        }, durationExceed);
    }

    var exceedPosts = [];
    function GetExceedPosts() {
        function getExceedPosts() {
            $.ajax({
                url: '@Url.Action("GetMPCExceedEcoservicePosts", "MonitoringPosts")',
                type: 'POST',
                success: function (data) {
                    exceedPosts = data.ids;
                },
                error: function () {
                }
            })
        }
        getExceedPosts();
        window.setInterval(function () {
            getExceedPosts();
        }, durationExceed * 10);
    }
</script>

@* GetInactivePosts *@
<script>
    var durationInactive = 3000;
    var inactivePosts = [];
    function GetInactivePosts() {
        function getInactivePosts() {
            $.ajax({
                url: '@Url.Action("GetInactiveEcoservicePosts", "MonitoringPosts")',
                type: 'POST',
                success: function (data) {
                    inactivePosts = data.ids;
                    $('#Test').val(data.ids);
                    //Layer_EcoserviceAirMonitoringPosts.refresh({force:true});
                    //Layer_EcoserviceAirMonitoringPosts.redraw();
                    Layer_EcoserviceAirMonitoringPosts.getSource().changed();
                },
                error: function () {
                }
            })
        }
        getInactivePosts();
        window.setInterval(function () {
            getInactivePosts();
        }, durationInactive * 10);
    }
</script>

@* window.onload *@
<script>
    window.onload = function start() {
        FlashExceedPosts();
        GetExceedPosts();
        GetInactivePosts();
    }
</script>

@*<input id="Test" type="text" value="TestValue" name="TestName"/>*@

@*<script>
        function Test() {
            Layer_EcoserviceAirMonitoringPosts.getSource().changed();
        }
    </script>*@