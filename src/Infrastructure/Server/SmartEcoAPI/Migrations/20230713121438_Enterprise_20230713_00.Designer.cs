// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SmartEcoAPI.Data;

namespace SmartEcoAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230713121438_Enterprise_20230713_00")]
    partial class Enterprise_20230713_00
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("SmartEcoAPI.Models.AActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("ActivityType");

                    b.Property<string>("AdditionalInformationKK");

                    b.Property<string>("AdditionalInformationRU");

                    b.Property<decimal>("Efficiency");

                    b.Property<DateTime?>("EndPeriod");

                    b.Property<int>("EventId");

                    b.Property<decimal>("ImplementationPercentage");

                    b.Property<string>("Name");

                    b.Property<int?>("ProjectId");

                    b.Property<DateTime?>("StartPeriod");

                    b.Property<int>("TargetId");

                    b.Property<int>("TargetTerritoryId");

                    b.Property<int?>("TargetValueId");

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("TargetId");

                    b.HasIndex("TargetTerritoryId");

                    b.HasIndex("TargetValueId");

                    b.ToTable("AActivity");
                });

            modelBuilder.Entity("SmartEcoAPI.Models.AActivityExecutor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AActivityId");

                    b.Property<decimal?>("Contribution");

                    b.Property<int>("ExecutorId");

                    b.HasKey("Id");

                    b.HasIndex("AActivityId");

                    b.HasIndex("ExecutorId");

                    b.ToTable("AActivityExecutor");
                });

            modelBuilder.Entity("SmartEcoAPI.Models.ASM.Enterprise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("Bin");

                    b.Property<string>("Contacts");

                    b.Property<int?>("EnterpriseTypeId");

                    b.Property<int>("KatoId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("EnterpriseTypeId");

                    b.ToTable("Enterprise","asm");
                });

            modelBuilder.Entity("SmartEcoAPI.Models.ASM.EnterpriseType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("EnterpriseType","asm");
                });

            modelBuilder.Entity("SmartEcoAPI.Models.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateTime");

                    b.Property<int>("PersonId");

                    b.Property<int>("QuestionId");

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answer");
                });

            modelBuilder.Entity("SmartEcoAPI.Models.AuthorizedAuthority", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("AuthorizedAuthority");
                });

            modelBuilder.Entity("SmartEcoAPI.Models.DataProvider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("DataProvider");
                });

            modelBuilder.Entity("SmartEcoAPI.Models.EcomonMonitoringPoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("EastLongitude");

                    b.Property<decimal>("NorthLatitude");

                    b.Property<int>("Number");

                    b.HasKey("Id");

                    b.ToTable("EcomonMonitoringPoint");
                });

            modelBuilder.Entity("SmartEcoAPI.Models.Ecopost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("EastLongitude");

                    b.Property<string>("Name");

                    b.Property<decimal>("NorthLatitude");

                    b.HasKey("Id");

                    b.ToTable("Ecopost");
                });

            modelBuilder.Entity("SmartEcoAPI.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("NameEN");

                    b.Property<string>("NameKK");

                    b.Property<string>("NameRU");

                    b.Property<int?>("ProjectId");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Event");
                });

            modelBuilder.Entity("SmartEcoAPI.Models.Executor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FullName");

                    b.Property<string>("Position");

                    b.HasKey("Id");

                    b.ToTable("Executor");
                });

            modelBuilder.Entity("SmartEcoAPI.Models.GreemPlantsPassport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountNumber");

                    b.Property<int?>("AmountArbours");

                    b.Property<int?>("AmountBenches");

                    b.Property<int?>("AmountBillboards");

                    b.Property<int?>("AmountConiferousTrees");

                    b.Property<int?>("AmountDeciduousTrees");

                    b.Property<int?>("AmountEquippedPlaygrounds");

                    b.Property<int?>("AmountEquippedSportsgrounds");

                    b.Property<int?>("AmountFormedTrees");

                    b.Property<int?>("AmountMonument");

                    b.Property<int?>("AmountOutdoorLighting");

                    b.Property<int?>("AmountShrubs");

                    b.Property<int?>("AmountSofas");

                    b.Property<int?>("AmountSofasAndBenches");

                    b.Property<int?>("AmountToilets");

                    b.Property<decimal?>("AreaUndeFlowerbeds");

                    b.Property<decimal?>("AreaUndeTracksAndPlatforms");

                    b.Property<decimal?>("AreaUnderGreenery");

                    b.Property<decimal?>("AreaUnderGroundlawn");

                    b.Property<decimal?>("AreaUnderLawn");

                    b.Property<decimal?>("AreaUnderMeadowlawn");

                    b.Property<decimal?>("AreaUnderOrdinarylawn");

                    b.Property<decimal?>("AreaUnderShrubs");

                    b.Property<decimal?>("AreaUnderTrees");

                    b.Property<decimal?>("Asphalted");

                    b.Property<int?>("Betwen10_20yearsConiferous");

                    b.Property<int?>("Betwen10_20yearsDeciduous");

                    b.Property<int?>("Billboards");

                    b.Property<decimal>("EastLongitude");

                    b.Property<int?>("EquippedPlaygrounds");

                    b.Property<int?>("EquippedSportsgrounds");

                    b.Property<decimal?>("Flowerbeds");

                    b.Property<string>("GreenObject");

                    b.Property<decimal?>("GreenTotalArea");

                    b.Property<decimal?>("GreenTotalAreaGa");

                    b.Property<int>("KATOId");

                    b.Property<decimal?>("Lawns");

                    b.Property<string>("LegalEntityUse");

                    b.Property<int?>("LengthOfHedges");

                    b.Property<decimal?>("LengthOfTrays");

                    b.Property<int?>("ListOfTreesByObjectBreedsCondition");

                    b.Property<int?>("ListOfTreesByObjectEconomicMeasures");

                    b.Property<int?>("ListOfTreesConiferous");

                    b.Property<int?>("ListOfTreesDeciduous");

                    b.Property<int?>("Monument");

                    b.Property<string>("NameAndLocation");

                    b.Property<string>("NameOfPowersAttributed");

                    b.Property<string>("NameOfRegistrationObject");

                    b.Property<decimal>("NorthLatitude");

                    b.Property<int?>("OtherCapitalStructures");

                    b.Property<int?>("OutdoorLighting");

                    b.Property<int?>("Over10yearsConiferous");

                    b.Property<int?>("Over10yearsDeciduous");

                    b.Property<string>("PassportGeneralInformation");

                    b.Property<decimal?>("PavingBlocks");

                    b.Property<string>("PresenceOfHistoricalObject");

                    b.Property<int?>("Shrubs");

                    b.Property<int?>("SofasAndBenches");

                    b.Property<int?>("Toilets");

                    b.Property<int?>("TotallAmountShrubs");

                    b.Property<decimal?>("TracksAndPlatforms");

                    b.Property<int?>("Tree");

                    b.Property<int?>("Upto10yearsConiferous");

                    b.Property<int?>("Upto10yearsDeciduous");

                    b.Property<int?>("Urns");

                    b.HasKey("Id");

                    b.HasIndex("KATOId");

                    b.ToTable("GreemPlantsPassport");
                });

            modelBuilder.Entity("SmartEcoAPI.Models.KATO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AreaType");

                    b.Property<string>("Code");

                    b.Property<int>("EgovId");

                    b.Property<int>("Level");

                    b.Property<string>("NameKK");

                    b.Property<string>("NameRU");

                    b.Property<int?>("ParentEgovId");

                    b.HasKey("Id");

                    b.ToTable("KATO");
                });

            modelBuilder.Entity("SmartEcoAPI.Models.KazHydrometAirPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdditionalInformation");

                    b.Property<decimal>("EastLongitude");

                    b.Property<string>("Name");

                    b.Property<decimal>("NorthLatitude");

                    b.Property<int>("Number");

                    b.HasKey("Id");

                    b.ToTable("KazHydrometAirPost");
                });

            modelBuilder.Entity("SmartEcoAPI.Models.KazHydrometSoilPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdditionalInformation");

                    b.Property<decimal>("EastLongitude");

                    b.Property<string>("Name");

                    b.Property<decimal>("NorthLatitude");

                    b.Property<int>("Number");

                    b.HasKey("Id");

                    b.ToTable("KazHydrometSoilPost");
                });

            modelBuilder.Entity("SmartEcoAPI.Models.LEDScreen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("EastLongitude");

                    b.Property<int>("MonitoringPostId");

                    b.Property<string>("Name");

                    b.Property<decimal>("NorthLatitude");

                    b.Property<int?>("Number");

                    b.HasKey("Id");

                    b.HasIndex("MonitoringPostId");

                    b.ToTable("LEDScreen");
                });

            modelBuilder.Entity("SmartEcoAPI.Models.Layer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("GeoServerName");

                    b.Property<string>("GeoServerWorkspace");

                    b.Property<int?>("Hour");

                    b.Property<int?>("KATOId");

                    b.Property<int?>("MeasuredParameterId");

                    b.Property<string>("NameEN");

                    b.Property<string>("NameKK");

                    b.Property<string>("NameRU");

                    b.Property<int?>("PollutionEnvironmentId");

                    b.Property<int?>("Season");

                    b.HasKey("Id");

                    b.HasIndex("KATOId");

                    b.HasIndex("MeasuredParameterId");

                    b.HasIndex("PollutionEnvironmentId");

                    b.ToTable("Layer");
                });

            modelBuilder.Entity("SmartEcoAPI.Models.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateTimeEnd");

                    b.Property<DateTime>("DateTimeStart");

                    b.Property<decimal>("EastLongitude");

                    b.Property<decimal>("NorthLatitude");

                    b.Property<int>("Number");

                    b.HasKey("Id");

                    b.ToTable("Log");
                });

            modelBuilder.Entity("SmartEcoAPI.Models.MeasuredData", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool?>("Averaged");

                    b.Property<DateTime?>("DateTime");

                    b.Property<long?>("Ecomontimestamp_ms");

                    b.Property<int?>("MaxValueDay");

                    b.Property<int?>("MaxValueMonth");

                    b.Property<decimal?>("MaxValuePerMonth");

                    b.Property<decimal?>("MaxValuePerYear");

                    b.Property<int>("MeasuredParameterId");

                    b.Property<int?>("MonitoringPostId");

                    b.Property<int?>("Month");

                    b.Property<int?>("PollutionSourceId");

                    b.Property<decimal?>("Value");

                    b.Property<int?>("Year");

                    b.HasKey("Id");

                    b.HasIndex("MeasuredParameterId");

                    b.HasIndex("MonitoringPostId");

                    b.HasIndex("PollutionSourceId");

                    b.ToTable("MeasuredData");
                });

            modelBuilder.Entity("SmartEcoAPI.Models.MeasuredParameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("EcomonCode");

                    b.Property<string>("KazhydrometCode");

                    b.Property<decimal?>("MPCDailyAverage");

                    b.Property<decimal?>("MPCMaxSingle");

                    b.Property<int?>("MeasuredParameterUnitId");

                    b.Property<string>("NameEN");

                    b.Property<string>("NameKK");

                    b.Property<string>("NameRU");

                    b.Property<string>("NameShortEN");

                    b.Property<string>("NameShortKK");

                    b.Property<string>("NameShortRU");

                    b.Property<string>("OceanusCode");

                    b.Property<int?>("PollutionEnvironmentId");

                    b.HasKey("Id");

                    b.HasIndex("MeasuredParameterUnitId");

                    b.HasIndex("PollutionEnvironmentId");

                    b.ToTable("MeasuredParameter");
                });

            modelBuilder.Entity("SmartEcoAPI.Models.MeasuredParameterUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("NameEN");

                    b.Property<string>("NameKK");

                    b.Property<string>("NameRU");

                    b.HasKey("Id");

                    b.ToTable("MeasuredParameterUnit");
                });

            modelBuilder.Entity("SmartEcoAPI.Models.MonitoringPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdditionalInformation");

                    b.Property<bool>("Automatic");

                    b.Property<int>("DataProviderId");

                    b.Property<decimal>("EastLongitude");

                    b.Property<int?>("KazhydrometID");

                    b.Property<string>("MN");

                    b.Property<string>("Name");

                    b.Property<decimal>("NorthLatitude");

                    b.Property<int>("Number");

                    b.Property<string>("PhoneNumber");

                    b.Property<int>("PollutionEnvironmentId");

                    b.Property<int?>("ProjectId");

                    b.Property<bool>("TurnOnOff");

                    b.HasKey("Id");

                    b.HasIndex("DataProviderId");

                    b.HasIndex("PollutionEnvironmentId");

                    b.HasIndex("ProjectId");

                    b.ToTable("MonitoringPost");
                });

            modelBuilder.Entity("SmartEcoAPI.Models.MonitoringPostMeasuredParameters", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal?>("Coefficient");

                    b.Property<decimal?>("Max");

                    b.Property<decimal?>("MaxMeasuredValue");

                    b.Property<int>("MeasuredParameterId");

                    b.Property<decimal?>("Min");

                    b.Property<decimal?>("MinMeasuredValue");

                    b.Property<int>("MonitoringPostId");

                    b.HasKey("Id");

                    b.HasIndex("MeasuredParameterId");

                    b.HasIndex("MonitoringPostId");

                    b.ToTable("MonitoringPostMeasuredParameters");
                });

            modelBuilder.Entity("SmartEcoAPI.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("Role");

                    b.HasKey("Id");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("SmartEcoAPI.Models.PlantationsState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("KATOId");

                    b.Property<int>("PlantationsStateTypeId");

                    b.Property<decimal>("TreesNumber");

                    b.HasKey("Id");

                    b.HasIndex("KATOId");

                    b.HasIndex("PlantationsStateTypeId");

                    b.ToTable("PlantationsState");
                });

            modelBuilder.Entity("SmartEcoAPI.Models.PlantationsStateType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("NameEN");

                    b.Property<string>("NameKK");

                    b.Property<string>("NameRU");

                    b.HasKey("Id");

                    b.ToTable("PlantationsStateType");
                });

            modelBuilder.Entity("SmartEcoAPI.Models.PlantationsType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("NameEN");

                    b.Property<string>("NameKK");

                    b.Property<string>("NameRU");

                    b.HasKey("Id");

                    b.ToTable("PlantationsType");
                });

            modelBuilder.Entity("SmartEcoAPI.Models.Pollutant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("NameEN");

                    b.Property<string>("NameKK");

                    b.Property<string>("NameRU");

                    b.HasKey("Id");

                    b.ToTable("Pollutant");
                });

            modelBuilder.Entity("SmartEcoAPI.Models.PollutionEnvironment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("NameEN");

                    b.Property<string>("NameKK");

                    b.Property<string>("NameRU");

                    b.HasKey("Id");

                    b.ToTable("PollutionEnvironment");
                });

            modelBuilder.Entity("SmartEcoAPI.Models.PollutionSource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("EastLongitude");

                    b.Property<string>("Name");

                    b.Property<decimal>("NorthLatitude");

                    b.HasKey("Id");

                    b.ToTable("PollutionSource");
                });

            modelBuilder.Entity("SmartEcoAPI.Models.PollutionSourceData", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateTime");

                    b.Property<int>("PollutantId");

                    b.Property<int>("PollutionSourceId");

                    b.Property<decimal>("Value");

                    b.HasKey("Id");

                    b.HasIndex("PollutantId");

                    b.HasIndex("PollutionSourceId");

                    b.ToTable("PollutionSourceData");
                });

            modelBuilder.Entity("SmartEcoAPI.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("SmartEcoAPI.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateTime");

                    b.Property<bool>("IsResolved");

                    b.Property<string>("Name");

                    b.Property<int?>("PersonId");

                    b.Property<string>("Text");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("Question");
                });

            modelBuilder.Entity("SmartEcoAPI.Models.ReceptionRecyclingPoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<decimal?>("EastLongitude");

                    b.Property<decimal?>("NorthLatitude");

                    b.Property<string>("Organization");

                    b.Property<int?>("ProjectId");

                    b.Property<string>("TypesRaw");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ReceptionRecyclingPoint");
                });

            modelBuilder.Entity("SmartEcoAPI.Models.SpeciallyProtectedNaturalTerritory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Areahectares");

                    b.Property<int>("AuthorizedAuthorityId");

                    b.Property<string>("NameEN");

                    b.Property<string>("NameKK");

                    b.Property<string>("NameRU");

                    b.HasKey("Id");

                    b.HasIndex("AuthorizedAuthorityId");

                    b.ToTable("SpeciallyProtectedNaturalTerritory");
                });

            modelBuilder.Entity("SmartEcoAPI.Models.SpeciesDiversity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("KATOId");

                    b.Property<int>("PlantationsTypeId");

                    b.Property<int>("TreesNumber");

                    b.HasKey("Id");

                    b.HasIndex("KATOId");

                    b.HasIndex("PlantationsTypeId");

                    b.ToTable("SpeciesDiversity");
                });

            modelBuilder.Entity("SmartEcoAPI.Models.Target", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("MeasuredParameterUnitId");

                    b.Property<string>("NameEN");

                    b.Property<string>("NameKK");

                    b.Property<string>("NameRU");

                    b.Property<int>("PollutionEnvironmentId");

                    b.Property<int?>("ProjectId");

                    b.Property<bool>("TypeOfAchievement");

                    b.HasKey("Id");

                    b.HasIndex("MeasuredParameterUnitId");

                    b.HasIndex("PollutionEnvironmentId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Target");
                });

            modelBuilder.Entity("SmartEcoAPI.Models.TargetTerritory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdditionalInformationKK");

                    b.Property<string>("AdditionalInformationRU");

                    b.Property<string>("GISConnectionCode");

                    b.Property<int?>("KATOId");

                    b.Property<int?>("KazHydrometSoilPostId");

                    b.Property<int?>("MonitoringPostId");

                    b.Property<string>("NameKK");

                    b.Property<string>("NameRU");

                    b.Property<int?>("ProjectId");

                    b.Property<int>("TerritoryTypeId");

                    b.HasKey("Id");

                    b.HasIndex("KATOId");

                    b.HasIndex("KazHydrometSoilPostId");

                    b.HasIndex("MonitoringPostId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("TerritoryTypeId");

                    b.ToTable("TargetTerritory");
                });

            modelBuilder.Entity("SmartEcoAPI.Models.TargetValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdditionalInformationKK");

                    b.Property<string>("AdditionalInformationRU");

                    b.Property<int?>("ProjectId");

                    b.Property<int>("TargetId");

                    b.Property<int>("TargetTerritoryId");

                    b.Property<bool>("TargetValueType");

                    b.Property<decimal>("Value");

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("TargetId");

                    b.HasIndex("TargetTerritoryId");

                    b.ToTable("TargetValue");
                });

            modelBuilder.Entity("SmartEcoAPI.Models.TerritoryType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdditionalInformationEN");

                    b.Property<string>("AdditionalInformationKK");

                    b.Property<string>("AdditionalInformationRU");

                    b.Property<string>("NameEN");

                    b.Property<string>("NameKK");

                    b.Property<string>("NameRU");

                    b.HasKey("Id");

                    b.ToTable("TerritoryType");
                });

            modelBuilder.Entity("SmartEcoAPI.Models.TreesByFacilityManagementMeasuresList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("BusinessEventsPlantationsTypeId");

                    b.Property<int?>("CrownFormation");

                    b.Property<int>("GreemPlantsPassportId");

                    b.Property<string>("MaintenanceWork");

                    b.Property<int>("PlantationsTypeId");

                    b.Property<string>("Quantity");

                    b.Property<int?>("SanitaryFelling");

                    b.Property<int?>("SanitaryPruning");

                    b.HasKey("Id");

                    b.HasIndex("BusinessEventsPlantationsTypeId");

                    b.HasIndex("GreemPlantsPassportId");

                    b.HasIndex("PlantationsTypeId");

                    b.ToTable("TreesByFacilityManagementMeasuresList");
                });

            modelBuilder.Entity("SmartEcoAPI.Models.TreesByObjectTableOfTheBreedStateList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("GreemPlantsPassportId");

                    b.Property<int>("PlantationsTypeId");

                    b.Property<string>("Quantity");

                    b.Property<int?>("StateOfCSR15PlantationsTypeId");

                    b.Property<int?>("StateOfCSR15_1");

                    b.Property<int?>("StateOfCSR15_2");

                    b.Property<int?>("StateOfCSR15_3");

                    b.Property<int?>("StateOfCSR15_4");

                    b.Property<int?>("StateOfCSR15_5");

                    b.HasKey("Id");

                    b.HasIndex("GreemPlantsPassportId");

                    b.HasIndex("PlantationsTypeId");

                    b.HasIndex("StateOfCSR15PlantationsTypeId");

                    b.ToTable("TreesByObjectTableOfTheBreedStateList");
                });

            modelBuilder.Entity("SmartEcoAPI.Models.AActivity", b =>
                {
                    b.HasOne("SmartEcoAPI.Models.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartEcoAPI.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");

                    b.HasOne("SmartEcoAPI.Models.Target", "Target")
                        .WithMany()
                        .HasForeignKey("TargetId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartEcoAPI.Models.TargetTerritory", "TargetTerritory")
                        .WithMany()
                        .HasForeignKey("TargetTerritoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartEcoAPI.Models.TargetValue", "TargetValue")
                        .WithMany()
                        .HasForeignKey("TargetValueId");
                });

            modelBuilder.Entity("SmartEcoAPI.Models.AActivityExecutor", b =>
                {
                    b.HasOne("SmartEcoAPI.Models.AActivity", "AActivity")
                        .WithMany()
                        .HasForeignKey("AActivityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartEcoAPI.Models.Executor", "Executor")
                        .WithMany()
                        .HasForeignKey("ExecutorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SmartEcoAPI.Models.ASM.Enterprise", b =>
                {
                    b.HasOne("SmartEcoAPI.Models.ASM.EnterpriseType", "EnterpriseType")
                        .WithMany()
                        .HasForeignKey("EnterpriseTypeId");
                });

            modelBuilder.Entity("SmartEcoAPI.Models.Answer", b =>
                {
                    b.HasOne("SmartEcoAPI.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartEcoAPI.Models.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SmartEcoAPI.Models.Event", b =>
                {
                    b.HasOne("SmartEcoAPI.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");
                });

            modelBuilder.Entity("SmartEcoAPI.Models.GreemPlantsPassport", b =>
                {
                    b.HasOne("SmartEcoAPI.Models.KATO", "KATO")
                        .WithMany()
                        .HasForeignKey("KATOId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SmartEcoAPI.Models.LEDScreen", b =>
                {
                    b.HasOne("SmartEcoAPI.Models.MonitoringPost", "MonitoringPost")
                        .WithMany()
                        .HasForeignKey("MonitoringPostId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SmartEcoAPI.Models.Layer", b =>
                {
                    b.HasOne("SmartEcoAPI.Models.KATO", "KATO")
                        .WithMany()
                        .HasForeignKey("KATOId");

                    b.HasOne("SmartEcoAPI.Models.MeasuredParameter", "MeasuredParameter")
                        .WithMany()
                        .HasForeignKey("MeasuredParameterId");

                    b.HasOne("SmartEcoAPI.Models.PollutionEnvironment", "PollutionEnvironment")
                        .WithMany()
                        .HasForeignKey("PollutionEnvironmentId");
                });

            modelBuilder.Entity("SmartEcoAPI.Models.MeasuredData", b =>
                {
                    b.HasOne("SmartEcoAPI.Models.MeasuredParameter", "MeasuredParameter")
                        .WithMany()
                        .HasForeignKey("MeasuredParameterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartEcoAPI.Models.MonitoringPost", "MonitoringPost")
                        .WithMany()
                        .HasForeignKey("MonitoringPostId");

                    b.HasOne("SmartEcoAPI.Models.PollutionSource", "PollutionSource")
                        .WithMany()
                        .HasForeignKey("PollutionSourceId");
                });

            modelBuilder.Entity("SmartEcoAPI.Models.MeasuredParameter", b =>
                {
                    b.HasOne("SmartEcoAPI.Models.MeasuredParameterUnit", "MeasuredParameterUnit")
                        .WithMany()
                        .HasForeignKey("MeasuredParameterUnitId");

                    b.HasOne("SmartEcoAPI.Models.PollutionEnvironment", "PollutionEnvironment")
                        .WithMany()
                        .HasForeignKey("PollutionEnvironmentId");
                });

            modelBuilder.Entity("SmartEcoAPI.Models.MonitoringPost", b =>
                {
                    b.HasOne("SmartEcoAPI.Models.DataProvider", "DataProvider")
                        .WithMany()
                        .HasForeignKey("DataProviderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartEcoAPI.Models.PollutionEnvironment", "PollutionEnvironment")
                        .WithMany()
                        .HasForeignKey("PollutionEnvironmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartEcoAPI.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");
                });

            modelBuilder.Entity("SmartEcoAPI.Models.MonitoringPostMeasuredParameters", b =>
                {
                    b.HasOne("SmartEcoAPI.Models.MeasuredParameter", "MeasuredParameter")
                        .WithMany()
                        .HasForeignKey("MeasuredParameterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartEcoAPI.Models.MonitoringPost", "MonitoringPost")
                        .WithMany()
                        .HasForeignKey("MonitoringPostId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SmartEcoAPI.Models.PlantationsState", b =>
                {
                    b.HasOne("SmartEcoAPI.Models.KATO", "KATO")
                        .WithMany()
                        .HasForeignKey("KATOId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartEcoAPI.Models.PlantationsStateType", "PlantationsStateType")
                        .WithMany()
                        .HasForeignKey("PlantationsStateTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SmartEcoAPI.Models.PollutionSourceData", b =>
                {
                    b.HasOne("SmartEcoAPI.Models.Pollutant", "Pollutant")
                        .WithMany()
                        .HasForeignKey("PollutantId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartEcoAPI.Models.PollutionSource", "PollutionSource")
                        .WithMany()
                        .HasForeignKey("PollutionSourceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SmartEcoAPI.Models.Question", b =>
                {
                    b.HasOne("SmartEcoAPI.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId");
                });

            modelBuilder.Entity("SmartEcoAPI.Models.ReceptionRecyclingPoint", b =>
                {
                    b.HasOne("SmartEcoAPI.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");
                });

            modelBuilder.Entity("SmartEcoAPI.Models.SpeciallyProtectedNaturalTerritory", b =>
                {
                    b.HasOne("SmartEcoAPI.Models.AuthorizedAuthority", "AuthorizedAuthority")
                        .WithMany()
                        .HasForeignKey("AuthorizedAuthorityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SmartEcoAPI.Models.SpeciesDiversity", b =>
                {
                    b.HasOne("SmartEcoAPI.Models.KATO", "KATO")
                        .WithMany()
                        .HasForeignKey("KATOId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartEcoAPI.Models.PlantationsType", "PlantationsType")
                        .WithMany()
                        .HasForeignKey("PlantationsTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SmartEcoAPI.Models.Target", b =>
                {
                    b.HasOne("SmartEcoAPI.Models.MeasuredParameterUnit", "MeasuredParameterUnit")
                        .WithMany()
                        .HasForeignKey("MeasuredParameterUnitId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartEcoAPI.Models.PollutionEnvironment", "PollutionEnvironment")
                        .WithMany()
                        .HasForeignKey("PollutionEnvironmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartEcoAPI.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");
                });

            modelBuilder.Entity("SmartEcoAPI.Models.TargetTerritory", b =>
                {
                    b.HasOne("SmartEcoAPI.Models.KATO", "KATO")
                        .WithMany()
                        .HasForeignKey("KATOId");

                    b.HasOne("SmartEcoAPI.Models.KazHydrometSoilPost", "KazHydrometSoilPost")
                        .WithMany()
                        .HasForeignKey("KazHydrometSoilPostId");

                    b.HasOne("SmartEcoAPI.Models.MonitoringPost", "MonitoringPost")
                        .WithMany()
                        .HasForeignKey("MonitoringPostId");

                    b.HasOne("SmartEcoAPI.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");

                    b.HasOne("SmartEcoAPI.Models.TerritoryType", "TerritoryType")
                        .WithMany()
                        .HasForeignKey("TerritoryTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SmartEcoAPI.Models.TargetValue", b =>
                {
                    b.HasOne("SmartEcoAPI.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");

                    b.HasOne("SmartEcoAPI.Models.Target", "Target")
                        .WithMany()
                        .HasForeignKey("TargetId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartEcoAPI.Models.TargetTerritory", "TargetTerritory")
                        .WithMany()
                        .HasForeignKey("TargetTerritoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SmartEcoAPI.Models.TreesByFacilityManagementMeasuresList", b =>
                {
                    b.HasOne("SmartEcoAPI.Models.PlantationsType", "BusinessEventsPlantationsType")
                        .WithMany()
                        .HasForeignKey("BusinessEventsPlantationsTypeId");

                    b.HasOne("SmartEcoAPI.Models.GreemPlantsPassport", "GreemPlantsPassport")
                        .WithMany()
                        .HasForeignKey("GreemPlantsPassportId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartEcoAPI.Models.PlantationsType", "PlantationsType")
                        .WithMany()
                        .HasForeignKey("PlantationsTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SmartEcoAPI.Models.TreesByObjectTableOfTheBreedStateList", b =>
                {
                    b.HasOne("SmartEcoAPI.Models.GreemPlantsPassport", "GreemPlantsPassport")
                        .WithMany()
                        .HasForeignKey("GreemPlantsPassportId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartEcoAPI.Models.PlantationsType", "PlantationsType")
                        .WithMany()
                        .HasForeignKey("PlantationsTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartEcoAPI.Models.PlantationsType", "StateOfCSR15PlantationsType")
                        .WithMany()
                        .HasForeignKey("StateOfCSR15PlantationsTypeId");
                });
#pragma warning restore 612, 618
        }
    }
}
